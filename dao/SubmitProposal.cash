pragma cashscript ^0.11.0;

/**
 * @param commitmentDeposit - The amount of sathoshis the creator has to commit to the proposal.
 * - It prevents spam of proposals, reducing confusion among the stake holders/token holders and reduces the risk of vote splitting.
 * - It requires a commitment from the creator to ensure that the proposal is widely accepted and socially agreed upon else they will lose the commitmentDeposit.
 * If the proposal passes, the creator will get back the commitmentDeposit.
 * If the proposal fails, the BCH is sent to anyone who calls the `completeOrFail` function of the ExecuteProposal contract.
 */
contract SubmitProposal(int minCommitmentDeposit) {

  /**
   * This function create a proposal with an intent to add a new contract to the project controlled by the DAO.
   *
   * @inputs
   * - Input0: DAO Contract's authorizedThreadNFT from Controller Contract (immutable NFT with commitment that has the lockingBytecode of this contract)
   *   - capability: immutable
   *   - length: 35 bytes
   *   - category: daoCategory
   * - Input1: Any input from this contract
   * - Input2: ProposalCounterNFT from Controller Contract
   *   - capability: minting
   *   - length: 4 bytes
   *   - category: daoCategory
   * - Input3: Funding UTXO
   *   - value: >= commitmentDeposit
   * 
   * @outputs
   * - Output0: DAO Contract's authorizedThreadNFT back to Controller Contract
   *   - capability: immutable
   *   - length: 35 bytes
   *   - category: daoCategory
   * - Output1: Input1 back to this contract without any change
   * - Output2: ProposalCounterNFT back to Controller Contract
   *   - capability: minting
   *   - length: 4 bytes
   *   - category: daoCategory
   * - Output3: VoteProposalNFT to Controller Contract
   *   - capability: mutable
   *   - length: 40 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>
   *   - category: daoCategory
   * - Output4: TimeProposalNFT to Controller Contract
   *   - capability: immutable
   *   - length: 29 or 39 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25/35 bytes)>
   *   - category: daoCategory
   *   - satoshis >= commitmentDeposit
   * - Output5: OP_RETURN with the proposal data
   * - Output6: Optional change pure BCH
   */
  function add(bytes proposalScriptHash, bytes threadCount) {
    require(tx.inputs.length == 4);
    require(tx.outputs.length <= 7);

    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
    // Ensure that the daoCategory or projectCategory in not minted here.
    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);
    
    // Add Proposal requires a 32 byte script hash and 2 byte thread count
    require(proposalScriptHash.length == 32);
    require(threadCount.length == 2);

    // Thread count should not be 0
    require(int(threadCount.reverse()) != 0);

    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will
    // be manipulating their own utxos.
    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);

    // ProposalCounterNFT should keep the same category and capability.
    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);
    // ProposalCounterNFT should always be 4 bytes
    require(tx.outputs[2].nftCommitment.length == 4);
    // Proposal NFT ID increases by 1 with each transaction.
    require(int(tx.outputs[2].nftCommitment.reverse()) == int(tx.inputs[2].nftCommitment.reverse()) + 1);

    bytes daoInputCategory = tx.inputs[0].tokenCategory;

    // ProposalCounterNFT should be minting and of the 'daoInputCategory'
    bytes proposalCounterCategory, bytes proposalCounterCapability = tx.outputs[2].tokenCategory.split(32);
    require(proposalCounterCategory == daoInputCategory);
    require(proposalCounterCapability == 0x02); // Minting

    // VoteProposalNFT should be mutable
    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[3].tokenCategory.split(32);
    require(voteProposalCategory == daoInputCategory);
    require(voteProposalCapability == 0x01); // Mutable

    // TimeProposalNFT should be immutable
    require(tx.outputs[4].tokenCategory == daoInputCategory);
    
    // Ensure funding is pure BCH and is >= commitmentDeposit
    require(tx.inputs[3].tokenCategory == 0x);
    require(tx.inputs[3].value >= minCommitmentDeposit);
    // Ensure the TimeProposalNFT has the same value as the commitmentDeposit
    require(tx.outputs[4].value >= minCommitmentDeposit);

    // Create the proposalID<4 bytes> + threadLeft<2 bytes> + threadCount<2 bytes> + proposalScriptHash<32 bytes>
    require(tx.outputs[3].nftCommitment == tx.outputs[2].nftCommitment + threadCount + threadCount + proposalScriptHash);
    require(tx.outputs[3].nftCommitment.length == 40);

    // Set the commitment for the TimeProposalNFT <proposalID<4 bytes>, CreatorLockingBytecode<any length bytes>>
    // @todo: Uncomment this, commented out because of cashscript bug
    // require(tx.outputs[4].nftCommitment == tx.outputs[2].nftCommitment + tx.inputs[3].lockingBytecode);

    // Allow a P2SH32 contract or a P2PKH to initiate the proposal
    require(tx.inputs[3].lockingBytecode.length == 35 || tx.inputs[3].lockingBytecode.length == 25);

    // Force OP_RETURN output
    require(tx.outputs[5].value == 0);    

    if(tx.outputs.length == 7) {
      // Ensure change is pure BCH
      require(tx.outputs[6].tokenCategory == 0x);
    }
  }

  /**
   * This function create a proposal with an intent to remove a contract from the project controlled by the DAO.
   *
   * @inputs
   * - Input0: DAO Contract's authorizedThreadNFT from Controller Contract (immutable NFT with commitment that has the lockingBytecode of this contract)
   *   - capability: immutable
   *   - length: 35 bytes
   *   - category: daoCategory
   * - Input1: Any input from this contract
   * - Input2: ProposalCounterNFT from Controller Contract
   *   - capability: minting
   *   - length: 4 bytes
   *   - category: daoCategory
   * - Input3: AuthorizedThreadNFT from the Project Contract 
   *   - capability: immutable
   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ScriptHash (32 bytes)>
   *   - category: projectCategory
   * - Input4: Funding UTXO
   *   - value: >= commitmentDeposit
   * 
   * @outputs
   * - Output0: DAO Contract's authorizedThreadNFT back to Controller Contract
   *   - capability: immutable
   *   - length: 35 bytes
   *   - category: daoCategory
   * - Output1: Input1 back to this contract without any change
   * - Output2: ProposalCounterNFT back to Controller Contract
   *   - capability: minting
   *   - length: 4 bytes
   *   - category: daoCategory
   * - Output3: AuthorizedThreadNFT back to the Project Contract
   *   - capability: immutable
   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ScriptHash (32 bytes)>
   *   - category: projectCategory
   * - Output4: VoteProposalNFT to Controller Contract
   *   - capability: mutable
   *   - length: 6 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes)>
   *   - category: daoCategory
   * - Output5: TimeProposalNFT to Controller Contract
   *   - capability: immutable
   *   - length: >=29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>
   *   - category: daoCategory
   *   - satoshis >= commitmentDeposit
   * - Output6: OP_RETURN with the proposal data
   * - Output7: Optional change pure BCH
   */
  function remove() {
    require(tx.inputs.length == 5);
    require(tx.outputs.length <= 8);

    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
    // Ensure that the daoCategory or projectCategory in not minted here.
    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);

    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will
    // be manipulating their own utxos.
    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[5].lockingBytecode == daoInputLockingBytecode);

    // The AuthorizedThreadNFT should not come from the DAO.
    require(tx.inputs[3].lockingBytecode != daoInputLockingBytecode);

    // Proposal NFT ID stays the same
    require(tx.outputs[2].nftCommitment == tx.inputs[2].nftCommitment);
    // ProposalCounterNFT should always be 4 bytes
    require(tx.outputs[2].nftCommitment.length == 4);
    // ProposalCounterNFT should keep the same category and capability.
    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);

    // Return the AuthorizedThreadNFT back to the Project Contract as it was in the input
    require(tx.inputs[3].lockingBytecode == tx.outputs[3].lockingBytecode);
    require(tx.inputs[3].tokenCategory == tx.outputs[3].tokenCategory);
    require(tx.inputs[3].nftCommitment == tx.outputs[3].nftCommitment);
    require(tx.inputs[3].tokenAmount == tx.outputs[3].tokenAmount);
    require(tx.inputs[3].value == tx.outputs[3].value);
    // AuthorizedThreadNFT should be 38 bytes
    require(tx.inputs[3].nftCommitment.length == 38);

    bytes daoInputCategory = tx.inputs[0].tokenCategory;

    // ProposalCounterNFT should be minting and of the 'daoInputCategory'
    bytes proposalCounterCategory, bytes proposalCounterCapability = tx.outputs[2].tokenCategory.split(32);
    require(proposalCounterCategory == daoInputCategory);
    require(proposalCounterCapability == 0x02); // Minting

    // VoteProposalNFT should be mutable
    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[4].tokenCategory.split(32);
    require(voteProposalCategory == daoInputCategory);
    require(voteProposalCapability == 0x01); // Mutable

    // TimeProposalNFT should be immutable
    require(tx.outputs[5].tokenCategory == daoInputCategory);
    
    // Ensure funding is pure BCH and is >= commitmentDeposit
    require(tx.inputs[4].tokenCategory == 0x);
    require(tx.inputs[4].value >= minCommitmentDeposit);
    // Ensure the TimeProposalNFT has the same value as the commitmentDeposit
    require(tx.outputs[5].value >= minCommitmentDeposit);

    // Take the proposalID<4 bytes> and threadLeft<2 bytes> from the AuthorizedThreadNFT of the Project Contract
    require(tx.outputs[4].nftCommitment == tx.inputs[3].nftCommitment.split(6)[0]);

    // @todo: Uncomment this, commented out because of cashscript bug
    // Set the commitment for the TimeProposalNFT <proposalID<4 bytes>, CreatorLockingBytecode<any length bytes>>
    // require(tx.outputs[5].nftCommitment == tx.inputs[3].nftCommitment.split(4)[0] + tx.inputs[4].lockingBytecode);

    // Allow a P2SH32 contract or a P2PKH to initiate the proposal
    require(tx.inputs[4].lockingBytecode.length == 35 || tx.inputs[4].lockingBytecode.length == 25);

    // Force OP_RETURN output
    require(tx.outputs[6].value == 0);    

    if(tx.outputs.length == 8) {
      // Ensure change is pure BCH
      require(tx.outputs[7].tokenCategory == 0x);
    }

  }

  /**
   * This function create a proposal with an intent to replace a contract from the project controlled by the DAO.
   *
   * @inputs
   * - Input0: DAO Contract's authorizedThreadNFT from Controller Contract (immutable NFT with commitment that has the lockingBytecode of this contract)
   *   - capability: immutable
   *   - length: 35 bytes
   *   - category: daoCategory
   * - Input1: Any input from this contract
   * - Input2: ProposalCounterNFT from Controller Contract
   *   - capability: minting
   *   - length: 4 bytes
   *   - category: daoCategory
   * - Input3: AuthorizedThreadNFT from the Project Contract 
   *   - capability: immutable
   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ScriptHash (32 bytes)>
   *   - category: projectCategory
   * - Input4: Funding UTXO
   *   - value: >= commitmentDeposit
   * 
   * @outputs
   * - Output0: DAO Contract's authorizedThreadNFT back to Controller Contract
   *   - capability: immutable
   *   - length: 35 bytes
   *   - category: daoCategory
   * - Output1: Input1 back to this contract without any change
   * - Output2: ProposalCounterNFT back to Controller Contract
   *   - capability: minting
   *   - length: 4 bytes
   *   - category: daoCategory
   * - Output3: AuthorizedThreadNFT back to the Project Contract
   *   - capability: immutable
   *   - length: 38 bytes
   *   - category: projectCategory
   * - Output4: VoteProposalNFT to Controller Contract
   *   - capability: mutable
   *   - length: 38 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ProposedScriptHash (32 bytes)>
   *   - category: daoCategory
   * - Output5: TimeProposalNFT to Controller Contract
   *   - capability: immutable
   *   - length: 29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>
   *   - category: daoCategory
   *   - satoshis >= commitmentDeposit
   * - Output6: OP_RETURN with the proposal data
   * - Output7: Optional change pure BCH
   */
  function replace(bytes proposalScriptHash) {
    require(tx.inputs.length == 5);
    require(tx.outputs.length <= 8);

    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
    // Ensure that the daoCategory or projectCategory in not minted here.
    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);

    require(proposalScriptHash.length == 32);
    // Proposal NFT ID stays the same
    require(tx.outputs[2].nftCommitment == tx.inputs[2].nftCommitment);

    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will
    // be manipulating their own utxos.
    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[5].lockingBytecode == daoInputLockingBytecode);
    // The AuthorizedThreadNFT should not come from the DAO.
    require(tx.inputs[3].lockingBytecode != daoInputLockingBytecode);

    // ProposalCounterNFT should always be 4 bytes
    require(tx.outputs[2].nftCommitment.length == 4);
    // ProposalCounterNFT should keep the same category and capability.
    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);

    // Return the AuthorizedThreadNFT back to the Project Contract as it was in the input
    require(tx.inputs[3].lockingBytecode == tx.outputs[3].lockingBytecode);
    require(tx.inputs[3].tokenCategory == tx.outputs[3].tokenCategory);
    require(tx.inputs[3].nftCommitment == tx.outputs[3].nftCommitment);
    require(tx.inputs[3].tokenAmount == tx.outputs[3].tokenAmount);
    require(tx.inputs[3].value == tx.outputs[3].value);
    // AuthorizedThreadNFT should be 38 bytes
    require(tx.inputs[3].nftCommitment.length == 38);

    bytes daoInputCategory = tx.inputs[0].tokenCategory;

    // ProposalCounterNFT should be minting and of the 'daoInputCategory'
    bytes proposalCounterCategory, bytes proposalCounterCapability = tx.outputs[2].tokenCategory.split(32);
    require(proposalCounterCategory == daoInputCategory);
    require(proposalCounterCapability == 0x02); // Minting

    // VoteProposalNFT should be mutable
    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[4].tokenCategory.split(32);
    require(voteProposalCategory == daoInputCategory);
    require(voteProposalCapability == 0x01); // Mutable

    // TimeProposalNFT should be immutable
    require(tx.outputs[5].tokenCategory == daoInputCategory);
    
    // Ensure funding is pure BCH and is >= commitmentDeposit
    require(tx.inputs[4].tokenCategory == 0x);
    require(tx.inputs[4].value >= minCommitmentDeposit);
    // Ensure the TimeProposalNFT has the same value as the commitmentDeposit
    require(tx.outputs[5].value >= minCommitmentDeposit);

    // Take the proposalID<4 bytes> + threadLeft<2 bytes> + proposalScriptHash<32 bytes> from the AuthorizedThreadNFT
    require(tx.outputs[4].nftCommitment == tx.inputs[3].nftCommitment.split(6)[0] + proposalScriptHash);

    // Set the commitment for the TimeProposalNFT <proposalID<4 bytes>, CreatorLockingBytecode<any length bytes>>
    // @todo: Uncomment this, commented out because of cashscript bug
    // require(tx.outputs[5].nftCommitment == tx.inputs[3].nftCommitment.split(4)[0] + tx.inputs[4].lockingBytecode);

    // Allow a P2SH32 contract or a P2PKH to initiate the proposal
    require(tx.inputs[4].lockingBytecode.length == 35 || tx.inputs[4].lockingBytecode.length == 25);

    // Force OP_RETURN output
    require(tx.outputs[6].value == 0);    

    if(tx.outputs.length == 8) {
      // Ensure change is pure BCH
      require(tx.outputs[7].tokenCategory == 0x);
    }
  }
}