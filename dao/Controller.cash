pragma cashscript ^0.11.0;

/**
  * @param daoCategory - The category of the DAO NFTs. [In reverse order]
 */
contract Controller(
  bytes32 daoCategory
) {
  /**
   * NOTE: Thread = utxo
   *
   * The Controller holds:
   * - ProposalCounterNFT, (minting, daoCategory, 4 bytes)                      [1 thread]
   * - AuthorizedThreadNFTs (immutable, daoCategory, 35 bytes)
   *   - SubmitProposal:                                                        [~x threads]
   *   - ExecuteProposal:                                                       [~x threads]
   *   - FailProposal:                                                          [~x threads]
   * - TimeProposalNFT, (immutable, daoCategory, 29 bytes)                      [1 thread/proposal]
   * - VoteProposalNFTs are mutable/immutable NFTs of daoCategory               [1 thread/proposal]
   *   - Intent to add new authorizedThreadNFTs to the upgradable project.
   *     - Commitment length is 40 bytes.
   *   - Intent to remove authorizedThreadNFTs from the upgradable project.
   *     - Commitment length is 6 bytes.
   *   - Intent to replace authorizedThreadNFTs in the upgradable project.
   *     - Commitment length is 38 bytes.
   * - UpgradableContractNFT, (minting, projectCategory, 0 bytes)               [1 thread]
   *
   * @inputs
   * - Input0: AuthorizedThreadNFT from self
   * - Input1: Any UTXO from Authorized contract
   * 
   * @outputs
   * - Output0: AuthorizedThreadNFT back to self
   * - Output1: Output back to Authorized contract to be reused again
   */
  function call(){
    // Added as safeguard.
    require(tx.version == 2);

    // Controller Contract

    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;
    // authorizedThreadNFT must stay with the DAO Contract.
    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);
    require(tx.outputs[0].lockingBytecode == selfLockingBytecode);

    require(tx.inputs[0].tokenCategory == daoCategory);
    require(tx.outputs[0].tokenCategory == daoCategory);
    // Keeping the value same to not influence any satoshi movement in authorized contracts
    require(tx.outputs[0].value == tx.inputs[0].value);
    // The commitment that has the lockingbytecode of the authorized contract should never change.
    require(tx.outputs[0].nftCommitment == tx.inputs[0].nftCommitment);
    // Not checking the tokenAmount as it changes.

    // Authorized Contract

    // Expect the NFT commitment that contains the lockingBytecode of the authorized contract.
    require(tx.inputs[0].nftCommitment.length == 35);

    // @todo: Uncomment this, commented out because of cashscript bug
    // require(tx.inputs[1].lockingBytecode == tx.inputs[0].nftCommitment);
    // With these prerequisites met, we just need to make sure that all the contracts that are deployed are written
    // and initialized properly, and they expect this structure and handle the inputs and outputs as expected.
  }
}
