pragma cashscript ^0.11.0;

contract Voting() {
  /**
   * @inputs
   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract.
   * - Input2: Minting NFT of daoCategory from DAO.
   * - Input3: Mutable Proposal NFT of daoCategory from DAO.
   * - Input4: Utxo to cast vote with tokenAmount
   * 
   * @outputs
   * - Output0: DAO Contract's authorizedThreadNFT back to self
   * - Output1: Input1 back to this contract without any change.
   * - Output2: Minting NFT of daoCategory back to DAO
   * - Output3: Mutable Proposal NFT back to DAO with tokenAmount (Equal to `voteAmount`)
   * - Output4: ReceiptNFT of Vote, to be used later to get back the tokens from proposal NFT to the bytecode of Input3
   * - Output5: Change tokenAmount and BCH
   */
  function vote(int voteAmount) {
    require(tx.inputs.length == 5);
    require(tx.outputs.length <= 6);

    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
    // Ensure that the daoCategory or projectCategory in not minted here.
    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);

    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will
    // be manipulating their own utxos.
    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);

    bytes daoInputCategory = tx.inputs[0].tokenCategory;
    require(tx.outputs[4].tokenCategory == daoInputCategory);

    // daoMintingNFT should be minting and of the 'daoInputCategory'
    bytes daoMintingCategory, bytes daoMintingCapability = tx.outputs[2].tokenCategory.split(32);
    require(daoMintingCategory == daoInputCategory);
    require(daoMintingCapability == 0x02); // Minting

    // VoteProposalNFT should be mutable
    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[3].tokenCategory.split(32);
    require(voteProposalCategory == daoInputCategory);
    require(voteProposalCapability == 0x01); // Mutable

    // The nftCommitment of the funding UTXO should be 40 bytes for AddProposal, 6 bytes for RemoveProposal and 38 bytes for ReplaceProposal
    int voteProposalLength = tx.inputs[3].nftCommitment.length;
    // No other length is allowed
    require(voteProposalLength == 40 || voteProposalLength == 6 || voteProposalLength == 38);

    // The voteProposalNFT gets the voteAmount added to it
    require(tx.outputs[3].tokenAmount == tx.inputs[3].tokenAmount + voteAmount);
    require(tx.outputs[3].value == tx.inputs[3].value);

    // Split the nftCommitment of the proposalNFT and take the first 4 bytes as the proposalId.
    // <4 bytes of proposalId><8 bytes of voteAmount>
    require(tx.outputs[4].nftCommitment == tx.inputs[3].nftCommitment.split(4)[0] + bytes8(voteAmount).reverse());
    require(tx.outputs[4].nftCommitment.length == 12);
    
    // @todo: Uncomment this, commented out because of cashscript bug
    // The recieptNFT should have the same lockingBytecode as the voting UTXO
    // require(tx.inputs[4].lockingBytecode == tx.outputs[4].lockingBytecode);

    require(tx.inputs[4].tokenAmount >= voteAmount);
    require(tx.outputs[5].tokenAmount == tx.inputs[4].tokenAmount - voteAmount);
    require(tx.outputs[5].nftCommitment == 0x);
  }

  /**
   * @inputs
   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract
   * - Input1: Any input from this contract.
   * - Input2: VoteProposalNFT from DAO
   * - Input3: RecieptNFT used to cast vote
   * - Input4: Funding UTXO               
   * 
   * @outputs
   * - Output0: DAO Contract's authorizedThreadNFT back to self
   * - Output1: Input1 back to this contract without any change.
   * - Output2: VoteProposalNFT back to DAO (minus the tokenAmount in the recieptNFT)
   * - Output3: tokenAmount to the recieptNFT provider
   * - Output4: Change pure BCH
   */
  function retract() {
    require(tx.inputs.length == 5);
    require(tx.outputs.length <= 5);

    // This contract can only be used at input1 and it should return the input1 back to itself.
    require(this.activeInputIndex == 1);
    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);
  
    // This contract can only be used with the 'lockingbytecode' used in the 0th input.
    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine
    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will
    // be manipulating their own utxos.
    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;
    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);
    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);

    // All NFTs should have the same category
    bytes daoInputCategory = tx.inputs[0].tokenCategory;
    require(tx.inputs[3].tokenCategory == daoInputCategory);
    require(tx.outputs[3].tokenCategory == daoInputCategory);

    // This holds the commitmentDeposit.
    require(tx.outputs[2].value == tx.inputs[2].value);

    // VoteProposalNFT should be mutable
    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[2].tokenCategory.split(32);
    require(voteProposalCategory == daoInputCategory);
    // Mutable when the voting is on-going and immutable when the voting is over
    require(voteProposalCapability == 0x01 || voteProposalCapability == 0x);

    // RecieptNFT should have 0 tokenAmount
    require(tx.inputs[3].tokenAmount == 0);

    // Get the proposalId and voteAmount from the VoteProposalNFT
    bytes proposalId, bytes voteAmountBytes = tx.inputs[3].nftCommitment.split(4);
    require(tx.inputs[3].nftCommitment.length == 12);

    // Compare projectID i.e the first 4 bytes of the nftCommitment
    require(proposalId == tx.inputs[2].nftCommitment.split(4)[0]);
    
    int voteAmount = int(voteAmountBytes.reverse());
    // VoteProposalNFT should have the voteAmount added to it
    require(tx.outputs[2].tokenAmount == tx.inputs[2].tokenAmount - voteAmount);
    // RecieptNFT should have the voteAmount subtracted from it
    require(tx.outputs[3].tokenAmount == tx.inputs[3].tokenAmount + voteAmount);

    // Pure BCH output
    require(tx.outputs[4].tokenCategory == 0x);
  }
}