{
  "contractName": "AddThreads",
  "constructorInputs": [
    {
      "name": "voteThreshold",
      "type": "int"
    },
    {
      "name": "voteWindow",
      "type": "int"
    },
    {
      "name": "projectCategory",
      "type": "bytes"
    },
    {
      "name": "projectLockingBytecode",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": []
    }
  ],
  "bytecode": "OP_TXINPUTCOUNT OP_6 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_8 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_4 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_3 OP_OUTPUTTOKENAMOUNT OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_ROT OP_GREATERTHANOREQUAL OP_VERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_2 OP_SPLIT OP_DUP OP_2 OP_SPLIT OP_4 OP_INPUTSEQUENCENUMBER OP_7 OP_ROLL OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_5 OP_PICK OP_EQUALVERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 1d OP_NUMEQUAL OP_4 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_3 OP_ROLL OP_REVERSEBYTES OP_BIN2NUM OP_1SUB OP_DUP OP_3 OP_PICK OP_BIN2NUM OP_LESSTHANOREQUAL OP_VERIFY OP_DUP OP_DUP OP_SIZE OP_NIP OP_2 OP_NUMEQUALVERIFY OP_SWAP OP_0 OP_NUMEQUAL OP_IF OP_3 OP_OUTPUTTOKENCATEGORY OP_6 OP_PICK OP_EQUALVERIFY OP_ENDIF OP_3 OP_OUTPUTTOKENCOMMITMENT OP_5 OP_PICK OP_ROT OP_CAT OP_4 OP_ROLL OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 28 OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 28 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_2SWAP OP_CAT OP_ROT OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTBYTECODE OP_3 OP_ROLL OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_ROT OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_NUMEQUAL OP_IF OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_DROP OP_1",
  "source": "pragma cashscript ^0.11.0;\n\n/**\n * @param voteThreshold - The minimum number of votes required for the proposal to pass.\n * @param voteWindow - The minimum time window during which votes can be cast.\n * @param projectCategory - The category of the project for which the proposal is being applied. [reversed]\n * @param projectScriptHash - The script hash of the project for which the proposal is being applied.\n */\ncontract AddThreads(\n  int voteThreshold,\n  int voteWindow,\n  bytes projectCategory,\n  bytes projectLockingBytecode\n) {\n\n /**\n   * This is called when the proposal intends to add a new contract to the project.\n   * The timeProposalNFT is burned when there are no more threads to be minted.\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract.\n   * - Input2: Minting NFT of the Upgradable Project from the DAO Contract\n   *   - capability: minting\n   *   - length: 0 bytes\n   *   - category: projectCategory\n   * - Input3: VoteProposalNFT from the DAO Contract\n   *   - capability: mutable\n   *   - length: 40 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Input4: TimeProposalNFT from the DAO Contract\n   *   - capability: immutable\n   *   - length: >=29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>\n   *   - category: daoCategory\n   *   - satoshis >= commitmentDeposit [This will fund the transaction]\n   * - Input5: Funding Utxo\n   *\n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change.\n   * - Output2: Minting NFT of the Upgradable Project back to DAO Contract\n   *   - capability: minting\n   *   - length: 0 bytes\n   *   - category: projectCategory\n   * - Output3: VoteProposalNFT back to DAO Contract\n   *   - capability: mutable\n   *   - length: 40 bytes <ProposalID (4 bytes), UpdatedThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Output4: New authorizedThreadNFT to the Project Contract\n   *   - capability: immutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: projectCategory\n   * - Output5: commitmentDeposit back to the creator\n   * - Output6 (May or may not be present): TimeProposalNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: >=29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>\n   *   - category: daoCategory\n   * - Output7: Change Utxo\n   */\n  function call() {\n    require(tx.inputs.length == 6);\n    require(tx.outputs.length <= 8);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the daoCategory or projectCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[4].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);\n\n    // Project minting NFT should be minting and of the 'projectCategory', used to mint the output[5]\n    bytes projectInputCategory, bytes projectInputCapability = tx.inputs[2].tokenCategory.split(32);\n    require(projectInputCategory == projectCategory);\n    require(projectInputCapability == 0x02); // Minting\n    // ProjectMinting NFT should go back to the DAO Contract without change\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n    \n    // Check ProposalNFTs categories\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.inputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n    require(tx.inputs[4].tokenCategory == daoInputCategory);\n    require(tx.outputs[3].tokenCategory == daoInputCategory);\n\n    // The vote amount should stay the same.\n    require(tx.inputs[3].tokenAmount == tx.outputs[3].tokenAmount);\n    // This condition is responsible for the proposal passing.\n    require(tx.inputs[3].tokenAmount >= voteThreshold);\n\n    // New authorizedThreadNFT to the project contract\n    bytes proposalId, bytes remainingBytes0 = tx.inputs[3].nftCommitment.split(4);\n    bytes threadLeft, bytes remainingBytes1 = remainingBytes0.split(2);\n    bytes threadCount, bytes proposedScriptHash = remainingBytes1.split(2);\n\n    // TimeProposalNFT\n    // The min wait time for the proposal has been crossed and now the proposal can be executed.\n    require(tx.inputs[4].sequenceNumber >= voteWindow);\n    require(tx.inputs[4].nftCommitment.split(4)[0] == proposalId);\n    // <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)> or <ProposalID (4 bytes), CreatorLockingBytecode (35 bytes)>\n    require(tx.inputs[4].nftCommitment.length == 29 || tx.inputs[4].nftCommitment.length == 39);\n\n    int newThreadLeft = int(threadLeft.reverse()) - 1;\n    require(newThreadLeft <= int(threadCount));\n    bytes newThreadLeftBytes = bytes(newThreadLeft);\n    require(newThreadLeftBytes.length == 2);\n\n    if(newThreadLeft == 0) {\n      // Make the VoteProposalNFT immutable\n      require(tx.outputs[3].tokenCategory == daoInputCategory);\n    }\n\n    require(tx.outputs[3].nftCommitment == proposalId + newThreadLeftBytes + remainingBytes1);\n    require(tx.outputs[3].nftCommitment.length == 40);\n    require(tx.inputs[3].nftCommitment.length == 40);\n    require(tx.outputs[3].nftCommitment.length == tx.inputs[3].nftCommitment.length);\n\n    require(tx.outputs[5].nftCommitment == proposalId + threadCount + proposedScriptHash);\n    require(tx.outputs[5].lockingBytecode == projectLockingBytecode);\n    require(tx.outputs[5].nftCommitment.length == 39);\n    require(tx.outputs[5].tokenCategory == projectCategory);\n\n    if(tx.outputs.length == 7) {\n      // Output6: Change pure BCH\n      require(tx.outputs[6].tokenCategory == 0x);\n    }\n\n  }\n\n\n  // function continueMintingThreads() {\n  //   // The proposalNFT would have different `threadLeft` and `threadCount` values.\n  //   // Allow anyone to execute it until the `threadLeft` is 0 and then turn the mutable to immutable.\n  //   // Allow all the voters to withdraw their votes from the thread and this NFT will stay here forever.\n  // }\n\n}",
  "debug": {
    "bytecode": "c3569c69c458a169c0519c69c0c7c0cd8769c0d100876900c752c75179876953c75179876954c75179876952cd5179876953cd5179876954cd517a876952ce01207f517a54798769007a52876952d152ce876900ce53ce01207f517a52798769007a51876954ce5179876953d15179876953d053d39c6953d0527aa26953cf547f007a527f0079527f54cb577aa26954cf547f755579876954cf8277011d9c54cf827701279c9b69537abc8151940079537981a169007900798277529c69517a009c6353d1567987696853d25579527a7e547a7e876953d2827701289c6953cf827701289c6953d2827753cf82779c6955d2537a537a7e527a7e876955cd537a876955d2827701279c6955d1527a8769c4579c6356d1008769685177",
    "sourceMap": "66:12:66:28;:32::33;:12:::1;:4::35;67:12:67:29:0;:33::34;:12:::1;:4::36;70:12:70:33:0;:37::38;:12:::1;:4::40;71:22:71:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;73:23:73:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;79:46:79:47:0;:36::64:1;80:22:80:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;81:22:81:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;82:22:82:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;83:23:83:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;84:23:84:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;85:23:85:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;88:73:88:74:0;:63::89:1;:96::98:0;:63::99:1;89:12:89:32:0;;:36::51;;:12:::1;:4::53;90:12:90:34:0;;:38::42;:12:::1;:4::44;92:23:92:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;95:39:95:40:0;:29::55:1;97:73:97:74:0;:63::89:1;:96::98:0;:63::99:1;98:12:98:32:0;;:36::52;;:12:::1;:4::54;99:12:99:34:0;;:38::42;:12:::1;:4::44;100:22:100:23:0;:12::38:1;:42::58:0;;:12:::1;:4::60;101:23:101:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;104:22:104:23:0;:12::36:1;:51::52:0;:40::65:1;:12;:4::67;106:22:106:23:0;:12::36:1;:40::53:0;;:12:::1;:4::55;109:56:109:57:0;:46::72:1;:79::80:0;:46::81:1;110::110:61:0;;:68::69;:46::70:1;111:50:111:65:0;;:72::73;:50::74:1;115:22:115:23:0;:12::39:1;:43::53:0;;:12:::1;:4::55;116:22:116:23:0;:12::38:1;:45::46:0;:12::47:1;:::50;:54::64:0;;:12:::1;:4::66;118:22:118:23:0;:12::38:1;:::45;;:49::51:0;:12:::1;:65::66:0;:55::81:1;:::88;;:92::94:0;:55:::1;:12;:4::96;120:28:120:38:0;;:::48:1;:24::49;:52::53:0;:24:::1;121:12:121:25:0;;:33::44;;:29::45:1;:12;:4::47;122:37:122:50:0;;123:12:123:30;;:::37:1;;:41::42:0;:12:::1;:4::44;125:7:125:20:0;;:24::25;:7:::1;:27:128:5:0;127:25:127:26;:14::41:1;:45::61:0;;:14:::1;:6::63;125:27:128:5;130:23:130:24:0;:12::39:1;:43::53:0;;:56::74;;:43:::1;:77::92:0;;:43:::1;:12;:4::94;131:23:131:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;132:22:132:23:0;:12::38:1;:::45;;:49::51:0;:12:::1;:4::53;133:23:133:24:0;:12::39:1;:::46;;:60::61:0;:50::76:1;:::83;;:12;:4::85;135:23:135:24:0;:12::39:1;:43::53:0;;:56::67;;:43:::1;:70::88:0;;:43:::1;:12;:4::90;136:23:136:24:0;:12::41:1;:45::67:0;;:12:::1;:4::69;137:23:137:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;138:23:138:24:0;:12::39:1;:43::58:0;;:12:::1;:4::60;140:7:140:24:0;:28::29;:7:::1;:31:143:5:0;142:25:142:26;:14::41:1;:45::47:0;:14:::1;:6::49;140:31:143:5;65:2:145:3;",
    "logs": [],
    "requires": [
      {
        "ip": 7,
        "line": 66
      },
      {
        "ip": 11,
        "line": 67
      },
      {
        "ip": 15,
        "line": 70
      },
      {
        "ip": 21,
        "line": 71
      },
      {
        "ip": 26,
        "line": 73
      },
      {
        "ip": 34,
        "line": 80
      },
      {
        "ip": 40,
        "line": 81
      },
      {
        "ip": 46,
        "line": 82
      },
      {
        "ip": 52,
        "line": 83
      },
      {
        "ip": 58,
        "line": 84
      },
      {
        "ip": 64,
        "line": 85
      },
      {
        "ip": 74,
        "line": 89
      },
      {
        "ip": 79,
        "line": 90
      },
      {
        "ip": 85,
        "line": 92
      },
      {
        "ip": 97,
        "line": 98
      },
      {
        "ip": 102,
        "line": 99
      },
      {
        "ip": 108,
        "line": 100
      },
      {
        "ip": 114,
        "line": 101
      },
      {
        "ip": 120,
        "line": 104
      },
      {
        "ip": 126,
        "line": 106
      },
      {
        "ip": 144,
        "line": 115
      },
      {
        "ip": 153,
        "line": 116
      },
      {
        "ip": 167,
        "line": 118
      },
      {
        "ip": 180,
        "line": 121
      },
      {
        "ip": 189,
        "line": 123
      },
      {
        "ip": 200,
        "line": 127
      },
      {
        "ip": 213,
        "line": 130
      },
      {
        "ip": 220,
        "line": 131
      },
      {
        "ip": 227,
        "line": 132
      },
      {
        "ip": 237,
        "line": 133
      },
      {
        "ip": 249,
        "line": 135
      },
      {
        "ip": 255,
        "line": 136
      },
      {
        "ip": 262,
        "line": 137
      },
      {
        "ip": 268,
        "line": 138
      },
      {
        "ip": 277,
        "line": 142
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.2"
  },
  "updatedAt": "2025-03-05T16:25:35.345Z"
}