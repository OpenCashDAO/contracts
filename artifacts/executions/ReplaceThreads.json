{
  "contractName": "ReplaceThreads",
  "constructorInputs": [
    {
      "name": "voteThreshold",
      "type": "int"
    },
    {
      "name": "voteWindow",
      "type": "int"
    },
    {
      "name": "projectCategory",
      "type": "bytes"
    },
    {
      "name": "projectLockingBytecode",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "test",
      "inputs": []
    },
    {
      "name": "call",
      "inputs": []
    }
  ],
  "bytecode": "OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_2 OP_2 OP_NUMEQUALVERIFY OP_2DROP OP_2DROP OP_DROP OP_1 OP_ELSE OP_4 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_6 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_4 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_3 OP_OUTPUTTOKENAMOUNT OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_LESSTHANOREQUAL OP_VERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_2 OP_SPLIT OP_DUP OP_2 OP_SPLIT OP_4 OP_INPUTSEQUENCENUMBER OP_6 OP_ROLL OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_5 OP_PICK OP_EQUALVERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 1d OP_NUMEQUALVERIFY OP_3 OP_ROLL OP_BIN2NUM OP_1SUB OP_DUP OP_3 OP_PICK OP_BIN2NUM OP_LESSTHANOREQUAL OP_VERIFY OP_DUP OP_SIZE OP_NIP OP_2 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_5 OP_PICK OP_ROT OP_CAT OP_4 OP_ROLL OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 28 OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 28 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_2SWAP OP_CAT OP_ROT OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTBYTECODE OP_ROT OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_NUMEQUAL OP_IF OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_1 OP_ENDIF",
  "source": "/**\n * @param voteThreshold - The minimum number of votes required for the proposal to pass.\n * @param voteWindow - The minimum time window during which votes can be cast.\n * @param projectCategory - The category of the project for which the proposal is being applied. [reversed]\n * @param projectScriptHash - The script hash of the project for which the proposal is being applied.\n */\ncontract ReplaceThreads(\n  int voteThreshold,\n  int voteWindow,\n  bytes projectCategory,\n  bytes projectLockingBytecode\n) {\n\n\n  function test(){\n    require(2==2);\n  }\n\n /**\n   * This is called when the proposal intends to add a new contract to the project.\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract.\n   * - Input2: VoteProposalNFT from the DAO Contract\n   *   - capability: mutable\n   *   - length: 40 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Input3: TimeProposalNFT from the DAO Contract\n   *   - capability: immutable\n   *   - length: >=29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>\n   *   - category: daoCategory\n   *   - satoshis >= commitmentDeposit [This will fund the transaction]\n   * - Input4: Minting NFT of the Upgradable Project from the DAO Contract\n   *   - capability: minting\n   *   - length: 0 bytes\n   *   - category: projectCategory\n   *\n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change.\n   * - Output2: Updated VoteProposalNFT back to DAO Contract\n   *   - capability: mutable\n   *   - length: 40 bytes <ProposalID (4 bytes), UpdatedThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Output3: Minting NFT of the Upgradable Project back to DAO Contract\n   *   - capability: minting\n   *   - length: 0 bytes\n   *   - category: projectCategory\n   * - Output4: New authorizedThreadNFT to the Project Contract\n   *   - capability: immutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: projectCategory\n   * - Output5: commitmentDeposit back to the creator\n   */\n  function call() {\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length <= 6);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the domainCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[4].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n\n    // Project minting NFT should be minting and of the 'projectCategory', used to mint the output[5]\n    bytes projectInputCategory, bytes projectInputCapability = tx.inputs[2].tokenCategory.split(32);\n    require(projectInputCategory == projectCategory);\n    require(projectInputCapability == 0x02); // Minting\n    // ProjectMinting NFT should go back to the DAO Contract without change\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n    \n    // Check ProposalNFTs categories\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.inputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n    require(tx.inputs[4].tokenCategory == daoInputCategory);\n    require(tx.outputs[3].tokenCategory == daoInputCategory);\n\n    // The vote amount should stay the same.\n    require(tx.inputs[3].tokenAmount == tx.outputs[3].tokenAmount);\n\n    // This condition is responsible for the proposal passing.\n    require(tx.inputs[3].tokenAmount >= voteThreshold);\n\n    // New authorizedThreadNFT to the project contract\n    bytes proposalId, bytes remainingBytes0 = tx.inputs[3].nftCommitment.split(4);\n    bytes threadLeft, bytes remainingBytes1 = remainingBytes0.split(2);\n    bytes threadCount, bytes proposedScriptHash = remainingBytes1.split(2);\n\n    // TimeProposalNFT\n    // The min wait time for the proposal has been crossed and now the proposal can be executed.\n    require(tx.inputs[4].sequenceNumber >= voteWindow);\n    require(tx.inputs[4].nftCommitment.split(4)[0] == proposalId);\n    require(tx.inputs[4].nftCommitment.length == 29);\n\n    int newThreadLeft = int(threadLeft) - 1;\n    require(newThreadLeft <= int(threadCount));\n    bytes newThreadLeftBytes = bytes(newThreadLeft);\n    require(newThreadLeftBytes.length == 2);\n\n    require(tx.outputs[3].nftCommitment == proposalId + newThreadLeftBytes + remainingBytes1);\n    require(tx.outputs[3].nftCommitment.length == 40);\n    require(tx.inputs[3].nftCommitment.length == 40);\n    require(tx.outputs[3].nftCommitment.length == tx.inputs[3].nftCommitment.length);\n\n    require(tx.outputs[5].nftCommitment == proposalId + threadCount + proposedScriptHash);\n    require(tx.outputs[5].lockingBytecode == projectLockingBytecode);\n    require(tx.outputs[5].nftCommitment.length == 39);\n    require(tx.outputs[5].tokenCategory == projectCategory);\n\n    if(tx.outputs.length == 7) {\n      // Output6: Change pure BCH\n      require(tx.outputs[6].tokenCategory == 0x);\n    }\n\n  }\n\n  // function mintThreads() {\n  //   // The proposalNFT would have different `threadLeft` and `threadCount` values.\n  //   // Allow anyone to execute it until the `threadLeft` is 0 and then turn the mutable to immutable.\n  //   // Allow all the voters to withdraw their votes from the thread and this NFT will stay here forever.\n  // }\n\n}",
  "debug": {
    "bytecode": "5479009c6352529c6951777777777767547a519c69c3559c69c456a169c0519c69c0c7c0cd8769c0d100876900c752c75179876953c75179876954c75179876952cd5179876953cd517a876952ce01207f517a54798769007a52876952d152ce876900ce53ce01207f517a52798769007a51876954ce5179876953d1517a876953d053d39c6953d0517aa26953cf547f007a527f0079527f54cb567aa26954cf547f755579876954cf8277011d9c69537a8151940079537981a169007a00798277529c6953d25579527a7e547a7e876953d2827701289c6953cf827701289c6953d2827753cf82779c6955d2537a537a7e527a7e876955cd527a876955d2827701279c6955d1517a8769c4579c6356d1008769685168",
    "sourceMap": "15:2:17:3;;;;;16:12:16:13;:15::16;:12:::1;:4::18;15:2:17:3;;;;;;;61::135::0;;;;;62:12:62:28;:32::33;:12:::1;:4::35;63:12:63:29:0;:33::34;:12:::1;:4::36;66:12:66:33:0;:37::38;:12:::1;:4::40;67:22:67:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;69:23:69:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;75:46:75:47:0;:36::64:1;76:22:76:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;77:22:77:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;78:22:78:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;79:23:79:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;80:23:80:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;83:73:83:74:0;:63::89:1;:96::98:0;:63::99:1;84:12:84:32:0;;:36::51;;:12:::1;:4::53;85:12:85:34:0;;:38::42;:12:::1;:4::44;87:23:87:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;90:39:90:40:0;:29::55:1;92:73:92:74:0;:63::89:1;:96::98:0;:63::99:1;93:12:93:32:0;;:36::52;;:12:::1;:4::54;94:12:94:34:0;;:38::42;:12:::1;:4::44;95:22:95:23:0;:12::38:1;:42::58:0;;:12:::1;:4::60;96:23:96:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;99:22:99:23:0;:12::36:1;:51::52:0;:40::65:1;:12;:4::67;102:22:102:23:0;:12::36:1;:40::53:0;;:12:::1;:4::55;105:56:105:57:0;:46::72:1;:79::80:0;:46::81:1;106::106:61:0;;:68::69;:46::70:1;107:50:107:65:0;;:72::73;:50::74:1;111:22:111:23:0;:12::39:1;:43::53:0;;:12:::1;:4::55;112:22:112:23:0;:12::38:1;:45::46:0;:12::47:1;:::50;:54::64:0;;:12:::1;:4::66;113:22:113:23:0;:12::38:1;:::45;;:49::51:0;:12:::1;:4::53;115:28:115:38:0;;:24::39:1;:42::43:0;:24:::1;116:12:116:25:0;;:33::44;;:29::45:1;:12;:4::47;117:37:117:50:0;;118:12:118:30;;:::37:1;;:41::42:0;:12:::1;:4::44;120:23:120:24:0;:12::39:1;:43::53:0;;:56::74;;:43:::1;:77::92:0;;:43:::1;:12;:4::94;121:23:121:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;122:22:122:23:0;:12::38:1;:::45;;:49::51:0;:12:::1;:4::53;123:23:123:24:0;:12::39:1;:::46;;:60::61:0;:50::76:1;:::83;;:12;:4::85;125:23:125:24:0;:12::39:1;:43::53:0;;:56::67;;:43:::1;:70::88:0;;:43:::1;:12;:4::90;126:23:126:24:0;:12::41:1;:45::67:0;;:12:::1;:4::69;127:23:127:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;128:23:128:24:0;:12::39:1;:43::58:0;;:12:::1;:4::60;130:7:130:24:0;:28::29;:7:::1;:31:133:5:0;132:25:132:26;:14::41:1;:45::47:0;:14:::1;:6::49;130:31:133:5;61:2:135:3;7:0:143:1",
    "logs": [],
    "requires": [
      {
        "ip": 12,
        "line": 16
      },
      {
        "ip": 28,
        "line": 62
      },
      {
        "ip": 32,
        "line": 63
      },
      {
        "ip": 36,
        "line": 66
      },
      {
        "ip": 42,
        "line": 67
      },
      {
        "ip": 47,
        "line": 69
      },
      {
        "ip": 55,
        "line": 76
      },
      {
        "ip": 61,
        "line": 77
      },
      {
        "ip": 67,
        "line": 78
      },
      {
        "ip": 73,
        "line": 79
      },
      {
        "ip": 79,
        "line": 80
      },
      {
        "ip": 89,
        "line": 84
      },
      {
        "ip": 94,
        "line": 85
      },
      {
        "ip": 100,
        "line": 87
      },
      {
        "ip": 112,
        "line": 93
      },
      {
        "ip": 117,
        "line": 94
      },
      {
        "ip": 123,
        "line": 95
      },
      {
        "ip": 129,
        "line": 96
      },
      {
        "ip": 135,
        "line": 99
      },
      {
        "ip": 141,
        "line": 102
      },
      {
        "ip": 159,
        "line": 111
      },
      {
        "ip": 168,
        "line": 112
      },
      {
        "ip": 175,
        "line": 113
      },
      {
        "ip": 187,
        "line": 116
      },
      {
        "ip": 196,
        "line": 118
      },
      {
        "ip": 208,
        "line": 120
      },
      {
        "ip": 215,
        "line": 121
      },
      {
        "ip": 222,
        "line": 122
      },
      {
        "ip": 232,
        "line": 123
      },
      {
        "ip": 244,
        "line": 125
      },
      {
        "ip": 250,
        "line": 126
      },
      {
        "ip": 257,
        "line": 127
      },
      {
        "ip": 263,
        "line": 128
      },
      {
        "ip": 272,
        "line": 132
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.2"
  },
  "updatedAt": "2025-03-04T20:10:40.376Z"
}