{
  "contractName": "ProposalToReplace",
  "constructorInputs": [
    {
      "name": "minCommitmentDeposit",
      "type": "int"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": [
        {
          "name": "proposalScriptHash",
          "type": "bytes"
        }
      ]
    }
  ],
  "bytecode": "OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_8 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_OVER OP_SIZE OP_NIP 20 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_2 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_4 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_2 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_3 OP_UTXOVALUE OP_OVER OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_OUTPUTVALUE OP_LESSTHANOREQUAL OP_VERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_4 OP_UTXOTOKENCOMMITMENT OP_6 OP_SPLIT OP_DROP OP_ROT OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 26 OP_NUMEQUALVERIFY OP_4 OP_OUTPUTTOKENCOMMITMENT OP_4 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_3 OP_UTXOBYTECODE OP_CAT OP_EQUALVERIFY OP_4 OP_UTXOBYTECODE OP_5 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_5 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_5 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_4 OP_UTXOVALUE OP_5 OP_OUTPUTVALUE OP_NUMEQUALVERIFY OP_6 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_7 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL",
  "source": "pragma cashscript ^0.11.0;\n\n/**\n * @param commitmentDeposit - The amount of sathoshis the creator has to commit to the proposal.\n * - It prevents spam of proposals, reducing confusion among the stakeholders and reduces the risk of vote splitting.\n * - It requires a commitment from the creator to go ensure that the proposal is widely accepted and socially agreed upon among the shareholders of the DAO\n * If the proposal passes, the creator will get back the commitmentDeposit.\n * If the proposal fails, the BCH is sent to anyone who calls the `FailProposal` contract.\n */\ncontract ProposalToReplace(int minCommitmentDeposit) {\n  /**\n   *\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract\n   * - Input2: ProposalCounterNFT from DAO Contract\n   *   - capability: minting\n   *   - length: 4 bytes\n   *   - category: daoCategory\n   * - Input3: AuthorizedThreadNFT from the Project Contract \n   * - Input4: Funding UTXO\n   *   - value: >= commitmentDeposit\n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: ProposalCounterNFT back to DAO Contract\n   *   - capability: minting\n   *   - length: 4 bytes\n   *   - category: daoCategory\n   * - Output3: VoteProposalNFT to DAO contract\n   *   - capability: mutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Output4: TimeProposalNFT to DAO contract\n   *   - capability: immutable\n   *   - length: 29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>\n   *   - category: daoCategory\n   *   - satoshis >= commitmentDeposit\n   * - Output5: AuthorizedThreadNFT back to the Project Contract\n   * - Output6: OP_RETURN with the proposal data\n   * - Output7: Change pure BCH\n   */\n  function call(bytes proposalScriptHash) {\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length <= 8);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the domainCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    require(proposalScriptHash.length == 32);\n    // Proposal NFT ID stays the same\n    require(tx.outputs[2].nftCommitment == tx.inputs[2].nftCommitment);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);\n\n    // ProposalCounterNFT should always be 4 bytes\n    require(tx.outputs[2].nftCommitment.length == 4);\n    // ProposalCounterNFT should keep the same category and capability.\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n\n    // ProposalCounterNFT should be minting and of the 'daoInputCategory'\n    bytes proposalCounterCategory, bytes proposalCounterCapability = tx.outputs[2].tokenCategory.split(32);\n    require(proposalCounterCategory == daoInputCategory);\n    require(proposalCounterCapability == 0x02); // Minting\n\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n\n    // TimeProposalNFT should be immutable\n    require(tx.outputs[4].tokenCategory == daoInputCategory);\n    \n    // Ensure funding is pure BCH and is >= commitmentDeposit\n    require(tx.inputs[3].tokenCategory == 0x);\n    require(tx.inputs[3].value >= minCommitmentDeposit);\n    // Ensure the TimeProposalNFT has the same value as the commitmentDeposit\n    require(tx.outputs[4].value >= minCommitmentDeposit);\n\n    // REPLACE: Take the proposalID<4 bytes> + threadLeft<2 bytes> + proposalScriptHash<32 bytes> from the AuthorizedThreadNFT\n    require(tx.outputs[3].nftCommitment == tx.inputs[4].nftCommitment.split(6)[0] + proposalScriptHash);\n    require(tx.outputs[3].nftCommitment.length == 38);\n\n    // Set the commitment for the TimeProposalNFT <proposalID<4 bytes>, CreatorLockingBytecode<any length bytes>>\n    require(tx.outputs[4].nftCommitment == tx.inputs[4].nftCommitment.split(4)[0] + tx.inputs[3].lockingBytecode);\n\n    // Return the AuthorizedThreadNFT back to the Project Contract as it was in the input\n    require(tx.inputs[4].lockingBytecode == tx.outputs[5].lockingBytecode);\n    require(tx.inputs[4].tokenCategory == tx.outputs[5].tokenCategory);\n    require(tx.inputs[4].nftCommitment == tx.outputs[5].nftCommitment);\n    require(tx.inputs[4].value == tx.outputs[5].value);\n\n    // Force OP_RETURN output\n    require(tx.outputs[6].value == 0);    \n\n    // Ensure change is pure BCH\n    require(tx.outputs[7].tokenCategory == 0x);\n\n  }\n}",
  "debug": {
    "bytecode": "c3559c69c458a169c0519c69c0c7c0cd8769c0d10087695179827701209c6952d252cf876900c752c75179876952cd5179876953cd5179876954cd517a876952d28277549c6952d152ce876900ce52d101207f517a52798769007a52876953d101207f517a52798769007a51876954d1517a876953ce00876953c65179a26954cc517aa26953d254cf567f75527a7e876953d2827701269c6954d254cf547f7553c77e876954c755cd876954ce55d1876954cf55d2876954c655cc9c6956cc009c6957d10087",
    "sourceMap": "51:12:51:28;:32::33;:12:::1;:4::35;52:12:52:29:0;:33::34;:12:::1;:4::36;55:12:55:33:0;:37::38;:12:::1;:4::40;56:22:56:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;58:23:58:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;60:12:60:30:0;;:::37:1;;:41::43:0;:12:::1;:4::45;62:23:62:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;68:46:68:47:0;:36::64:1;69:22:69:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;70:23:70:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;71:23:71:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;72:23:72:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;75:23:75:24:0;:12::39:1;:::46;;:50::51:0;:12:::1;:4::53;77:23:77:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;79:39:79:40:0;:29::55:1;82:80:82:81:0;:69::96:1;:103::105:0;:69::106:1;83:12:83:35:0;;:39::55;;:12:::1;:4::57;84:12:84:37:0;;:41::45;:12:::1;:4::47;87:74:87:75:0;:63::90:1;:97::99:0;:63::100:1;88:12:88:32:0;;:36::52;;:12:::1;:4::54;89:12:89:34:0;;:38::42;:12:::1;:4::44;92:23:92:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;95:22:95:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;96:22:96:23:0;:12::30:1;:34::54:0;;:12:::1;:4::56;98:23:98:24:0;:12::31:1;:35::55:0;;:12:::1;:4::57;101:23:101:24:0;:12::39:1;:53::54:0;:43::69:1;:76::77:0;:43::78:1;:::81;:84::102:0;;:43:::1;:12;:4::104;102:23:102:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;105:23:105:24:0;:12::39:1;:53::54:0;:43::69:1;:76::77:0;:43::78:1;:::81;:94::95:0;:84::112:1;:43;:12;:4::114;108:22:108:23:0;:12::40:1;:55::56:0;:44::73:1;:12;:4::75;109:22:109:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;110:22:110:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;111:22:111:23:0;:12::30:1;:45::46:0;:34::53:1;:12;:4::55;114:23:114:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;117:23:117:24:0;:12::39:1;:43::45:0;:12:::1",
    "logs": [],
    "requires": [
      {
        "ip": 4,
        "line": 51
      },
      {
        "ip": 8,
        "line": 52
      },
      {
        "ip": 12,
        "line": 55
      },
      {
        "ip": 18,
        "line": 56
      },
      {
        "ip": 23,
        "line": 58
      },
      {
        "ip": 30,
        "line": 60
      },
      {
        "ip": 36,
        "line": 62
      },
      {
        "ip": 44,
        "line": 69
      },
      {
        "ip": 50,
        "line": 70
      },
      {
        "ip": 56,
        "line": 71
      },
      {
        "ip": 62,
        "line": 72
      },
      {
        "ip": 69,
        "line": 75
      },
      {
        "ip": 75,
        "line": 77
      },
      {
        "ip": 87,
        "line": 83
      },
      {
        "ip": 92,
        "line": 84
      },
      {
        "ip": 102,
        "line": 88
      },
      {
        "ip": 107,
        "line": 89
      },
      {
        "ip": 113,
        "line": 92
      },
      {
        "ip": 118,
        "line": 95
      },
      {
        "ip": 124,
        "line": 96
      },
      {
        "ip": 130,
        "line": 98
      },
      {
        "ip": 142,
        "line": 101
      },
      {
        "ip": 149,
        "line": 102
      },
      {
        "ip": 161,
        "line": 105
      },
      {
        "ip": 167,
        "line": 108
      },
      {
        "ip": 173,
        "line": 109
      },
      {
        "ip": 179,
        "line": 110
      },
      {
        "ip": 185,
        "line": 111
      },
      {
        "ip": 190,
        "line": 114
      },
      {
        "ip": 195,
        "line": 117
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.2"
  },
  "updatedAt": "2025-03-04T17:15:28.126Z"
}