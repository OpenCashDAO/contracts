{
  "contractName": "Controller",
  "constructorInputs": [
    {
      "name": "daoCategory",
      "type": "bytes32"
    }
  ],
  "abi": [
    {
      "name": "call",
      "inputs": []
    }
  ],
  "bytecode": "OP_TXVERSION OP_2 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_0 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_0 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_OUTPUTVALUE OP_0 OP_UTXOVALUE OP_NUMEQUALVERIFY OP_0 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 23 OP_NUMEQUAL",
  "source": "pragma cashscript ^0.11.0;\n\n/**\n  * @param daoCategory - The category of the DAO NFTs. [In reverse order]\n */\ncontract Controller(\n  bytes32 daoCategory\n) {\n  /**\n   * The Controller holds:\n   * - AuthorizedThreadNFTs (immutable, daoCategory, 35 bytes)\n   *   - ProposalToAdd:       \t   \t[~x threads]\n   *   - ProposalToRemove:    \t   \t[~x threads]\n   *   - ProposalToReplace:     \t  [~x threads]\n   *   - ExecuteAddProposal:     \t\t[~x threads]\n   *   - ExecuteRemoveProposal:  \t\t[~x threads]\n   *   - ExecuteReplaceProposal:\t  [~x threads]\n   *   - FailProposal:\t       \t    [~x threads]\n   *   - Vote:                 \t  \t[~x threads]\n   *   - RetractVote:          \t    [~x threads]\n   * - ProposalCounterNFT, (minting, daoCategory, 4 bytes)                      [1 thread]\n   * - TimeProposalNFT, (immutable, daoCategory, 29 bytes)                      [1 thread/proposal]\n   * - VoteProposalNFTs are mutable/immutable NFTs of daoCategory\n   *   - NFT created by `ProposalToAdd` Contract the commitment length is 40 bytes and is mutable.\n   *   - NFT created by `ProposalToRemove` Contract the commitment length is 6 bytes and is mutable.\n   *   - NFT created by `ProposalToReplace` Contract the commitment length is 38 bytes and is mutable.\n   *   Once all the threads are created/removed/replaced, the NFT becomes immutable.\n   * - UpgradableContractNFT, (minting, upgradableCategory, 0 bytes)            [1 thread]\n   *\n   * Each voter is issued a voteNFT when they cast a vote.\n   * - VoteNFT, (immutable, daoCategory, 12 bytes) <ProposalId><VoteAmount>\n   *\n   * Once the voting is over, the proposalNFT becomes immutable, making it un-usable for any other contract\n   * It also means that the proposal has ended.\n   *\n   * The users are not allowed to retractVotes when proposal is being executed.\n   *\n   * @inputs\n   * - Input0: AuthorizedThreadNFT from self\n   * - Input1: Any UTXO from Authorized contract\n   * \n   * @outputs\n   * - Output0: AuthorizedThreadNFT back to self\n   * - Output1: Output back to Authorized contract to be reused again\n   */\n  function call(){\n    // Added as safeguard.\n    require(tx.version == 2);\n\n    // Controller Contract\n\n    bytes selfLockingBytecode = tx.inputs[this.activeInputIndex].lockingBytecode;\n    // authorizedThreadNFT must stay with the DAO Contract.\n    require(tx.inputs[0].lockingBytecode == selfLockingBytecode);\n    require(tx.outputs[0].lockingBytecode == selfLockingBytecode);\n\n    require(tx.inputs[0].tokenCategory == daoCategory);\n    require(tx.outputs[0].tokenCategory == daoCategory);\n    // Keeping the value same to not influence any satoshi movement in authorized contracts\n    require(tx.outputs[0].value == tx.inputs[0].value);\n    // The commitment that has the lockingbytecode of the authorized contract should never change.\n    require(tx.outputs[0].nftCommitment == tx.inputs[0].nftCommitment);\n    // Not checking the tokenAmount as it changes.\n\n    // Authorized Contract\n\n    // Expect the NFT commitment that contains the lockingBytecode of the authorized contract.\n    require(tx.inputs[0].nftCommitment.length == 35);\n\n    // @todo: Uncomment this, commented out because of cashscript bug\n    // require(tx.inputs[1].lockingBytecode == tx.inputs[0].nftCommitment);\n    // With these prerequisites met, we just need to make sure that all the contracts that are deployed are written\n    // and initialized properly, and they expect this structure and handle the inputs and outputs as expected.\n  }\n}\n",
  "debug": {
    "bytecode": "c2529c69c0c700c75179876900cd517a876900ce5179876900d1517a876900cc00c69c6900d200cf876900cf827701239c",
    "sourceMap": "48:12:48:22;:26::27;:12:::1;:4::29;52:42:52:63:0;:32::80:1;54:22:54:23:0;:12::40:1;:44::63:0;;:12:::1;:4::65;55:23:55:24:0;:12::41:1;:45::64:0;;:12:::1;:4::66;57:22:57:23:0;:12::38:1;:42::53:0;;:12:::1;:4::55;58:23:58:24:0;:12::39:1;:43::54:0;;:12:::1;:4::56;60:23:60:24:0;:12::31:1;:45::46:0;:35::53:1;:12;:4::55;62:23:62:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;68:22:68:23:0;:12::38:1;:::45;;:49::51:0;:12:::1",
    "logs": [],
    "requires": [
      {
        "ip": 4,
        "line": 48
      },
      {
        "ip": 12,
        "line": 54
      },
      {
        "ip": 18,
        "line": 55
      },
      {
        "ip": 24,
        "line": 57
      },
      {
        "ip": 30,
        "line": 58
      },
      {
        "ip": 36,
        "line": 60
      },
      {
        "ip": 42,
        "line": 62
      },
      {
        "ip": 49,
        "line": 68
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.2"
  },
  "updatedAt": "2025-03-05T16:25:34.736Z"
}