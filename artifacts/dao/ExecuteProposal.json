{
  "contractName": "ExecuteProposal",
  "constructorInputs": [
    {
      "name": "voteThreshold",
      "type": "int"
    },
    {
      "name": "voteWindow",
      "type": "int"
    },
    {
      "name": "projectCategory",
      "type": "bytes"
    },
    {
      "name": "projectLockingBytecode",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "completeOrFail",
      "inputs": []
    },
    {
      "name": "execute",
      "inputs": []
    }
  ],
  "bytecode": "OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_DUP 1d OP_NUMEQUAL OP_SWAP 27 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_DUP 28 OP_NUMEQUAL OP_OVER OP_6 OP_NUMEQUAL OP_BOOLOR OP_SWAP 26 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_6 OP_SPLIT OP_DROP OP_4 OP_SPLIT OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_3 OP_ROLL OP_ROT OP_EQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_0 OP_NUMEQUAL OP_IF OP_2 OP_UTXOTOKENAMOUNT OP_3 OP_PICK OP_LESSTHANOREQUAL OP_VERIFY OP_3 OP_INPUTSEQUENCENUMBER OP_4 OP_PICK OP_GREATERTHANOREQUAL OP_VERIFY OP_ELSE OP_2 OP_OUTPUTTOKENAMOUNT OP_3 OP_UTXOTOKENAMOUNT OP_NUMEQUALVERIFY OP_OVER OP_REVERSEBYTES OP_BIN2NUM OP_0 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_ENDIF OP_3 OP_OUTPUTVALUE OP_3 OP_UTXOVALUE OP_NUMEQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_2DROP OP_2DROP OP_2DROP OP_DROP OP_1 OP_ELSE OP_4 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_2 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_NUMEQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_DUP OP_6 OP_NUMEQUAL OP_OVER 26 OP_NUMEQUAL OP_BOOLOR OP_SWAP 28 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_DUP 1d OP_NUMEQUAL OP_SWAP 27 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_3 OP_UTXOTOKENAMOUNT OP_0 OP_NUMEQUAL OP_IF OP_2 OP_UTXOTOKENAMOUNT OP_2 OP_PICK OP_GREATERTHAN OP_VERIFY OP_3 OP_INPUTSEQUENCENUMBER OP_3 OP_PICK OP_GREATERTHANOREQUAL OP_VERIFY OP_3 OP_OUTPUTTOKENAMOUNT OP_2 OP_UTXOTOKENAMOUNT OP_NUMEQUALVERIFY OP_3 OP_OUTPUTVALUE OP_2 OP_UTXOVALUE OP_NUMEQUALVERIFY OP_ELSE OP_3 OP_OUTPUTTOKENAMOUNT OP_3 OP_UTXOTOKENAMOUNT OP_NUMEQUALVERIFY OP_2 OP_OUTPUTVALUE OP_2 OP_UTXOVALUE OP_NUMEQUALVERIFY OP_ENDIF OP_2 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_2 OP_PICK OP_EQUALVERIFY OP_2 OP_SPLIT OP_DROP OP_REVERSEBYTES OP_BIN2NUM OP_1SUB OP_DUP OP_0 OP_GREATERTHANOREQUAL OP_VERIFY OP_2 OP_NUM2BIN OP_REVERSEBYTES OP_4 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_6 OP_NUMEQUAL OP_IF OP_TXOUTPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_ELSE OP_TXOUTPUTCOUNT OP_7 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTBYTECODE OP_3 OP_PICK OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_5 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_5 OP_OUTPUTBYTECODE OP_5 OP_UTXOBYTECODE OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_0 OP_EQUALVERIFY OP_2 OP_UTXOTOKENCOMMITMENT OP_6 OP_SPLIT OP_NIP OP_2 OP_OUTPUTTOKENCOMMITMENT OP_2OVER OP_CAT OP_2 OP_PICK OP_CAT OP_EQUALVERIFY OP_DUP OP_2 OP_SPLIT OP_2 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 26 OP_NUMEQUAL OP_IF OP_6 OP_UTXOTOKENCOMMITMENT OP_6 OP_SPLIT OP_DROP OP_4 OP_SPLIT OP_NIP OP_ROT OP_DROP OP_SWAP OP_2 OP_PICK OP_NIP OP_ENDIF OP_6 OP_OUTPUTTOKENCOMMITMENT OP_5 OP_PICK OP_3 OP_PICK OP_CAT OP_2 OP_PICK OP_CAT OP_EQUALVERIFY OP_6 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 26 OP_NUMEQUALVERIFY OP_5 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_OVER OP_11 OP_PICK OP_EQUALVERIFY OP_DUP OP_2 OP_EQUALVERIFY OP_6 OP_OUTPUTTOKENCATEGORY OP_11 OP_PICK OP_EQUALVERIFY OP_2DROP OP_2DROP OP_DROP OP_ENDIF OP_6 OP_2 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 26 OP_NUMEQUAL OP_IF OP_DROP OP_7 OP_6 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_3 OP_PICK OP_EQUALVERIFY OP_ENDIF OP_TXINPUTCOUNT OP_NUMEQUALVERIFY OP_2DROP OP_2DROP OP_2DROP OP_DROP OP_1 OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\n/**\n * @param voteThreshold - The minimum number of votes required for the proposal to pass.\n * @param voteWindow - The minimum time window during which votes can be cast.\n * @param projectCategory - The category of the project for which the proposal is being applied. [reversed]\n * @param projectScriptHash - The script hash of the project for which the proposal is being applied.\n */\ncontract ExecuteProposal(\n  int voteThreshold,\n  int voteWindow,\n  bytes projectCategory,\n  bytes projectLockingBytecode\n) {\n\n  /**\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT\n   *   - capability: immutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: projectCategory\n   * - Input1: Any input from this contract.\n   * - Input2: VoteProposalNFT from the DAO Contract\n   *   - capability: mutable\n   *   - length:\n   *     - ADD: 40 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *     - REMOVE: 6 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes)>\n   *     - REPLACE: 38 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Input3: TimeProposalNFT from the DAO Contract\n   *   - capability: immutable\n   *   - length: 29 bytes or 39 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 or 35 bytes)>\n   *   - category: daoCategory\n   *   - satoshis >= commitmentDeposit\n   * - Input4: Funding Utxo\n   *\n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change.\n   * - Output2: VoteProposalNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length:\n   *     - ADD: 40 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *     - REMOVE: 6 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes)>\n   *     - REPLACE: 38 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   *   - tokenAmount: all votes\n   * - Output3: commitmentDeposit to the creator\n   * - Output4: Change BCH\n   */\n  function completeOrFail() {\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length == 5);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    // VoteProposalNFT from DAO Contract\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    // TimeProposalNFT from DAO Contract\n    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);\n    // VoteProposalNFT back to DAO Contract\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.inputs[2].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n    // TimeProposalNFT should be daoCategory\n    require(tx.inputs[3].tokenCategory == daoInputCategory);\n    // Ensure that the voteProposalNFT is being changed to immutable\n    require(tx.outputs[2].tokenCategory == daoInputCategory);\n\n    // Ensure that the timeProposalNFT is being used. Since each capability and length has different role.\n    // When an NFT has daoCategory, nftCommitment length 29/39 and coming from DAO contract, it's a timeProposalNFT.\n    int timeProposalNFTLength = tx.inputs[3].nftCommitment.length;\n    // <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)> or <ProposalID (4 bytes), CreatorLockingBytecode (35 bytes)>\n    require(timeProposalNFTLength == 29 || timeProposalNFTLength == 39);\n\n    // Ensure that the voteProposalNFT for 'ADD' operation is being used. Since each capability and length has different role.\n    // 'ADD' type voteProposalNFT: daoCategory, nftCommitment length 40, mutable capability and coming from DAO contract,\n    // 'ADD' type voteProposalNFT: daoCategory, nftCommitment length 40, mutable capability and coming from DAO contract,\n    // 'ADD' type voteProposalNFT: daoCategory, nftCommitment length 40, mutable capability and coming from DAO contract,\n    int voteProposalNFTLength = tx.inputs[2].nftCommitment.length;\n    require(voteProposalNFTLength == 40 || voteProposalNFTLength == 6 || voteProposalNFTLength == 38);\n\n    // Break the voteProposalNFT into proposalId, threadLeft, threadCount and proposedScriptHash\n    bytes voteProposalNFTByteschunk = tx.inputs[2].nftCommitment.split(6)[0];\n    bytes proposalIDFromVoteProposalNFT, bytes threadsLeft = voteProposalNFTByteschunk.split(4);\n    bytes proposalIDFromTimeProposalNFT, bytes creatorLockingBytecode = tx.inputs[3].nftCommitment.split(4);\n\n    // Ensure that the timeProposalNFT and voteProposalNFT have the same proposalId\n    require(proposalIDFromVoteProposalNFT == proposalIDFromTimeProposalNFT);\n\n    // If the timeProposalNFT has no votes then it means that this is the first time the proposal is being executed.\n    if(tx.inputs[3].tokenAmount == 0) {\n      // The proposal should have less than equal to `voteThreshold` votes to be considered as failed.\n      require(tx.inputs[2].tokenAmount <= voteThreshold);\n      // The min wait time for the proposal has been crossed and now the proposal can be executed.\n      require(tx.inputs[3].sequenceNumber >= voteWindow);\n    } else {\n      // Ensure that the voteProposalNFT has all the votes\n      require(tx.outputs[2].tokenAmount == tx.inputs[3].tokenAmount);\n      // Ensure that the threadLeft is 0\n      require(int(threadsLeft.reverse()) == 0);\n\n      // Ensure that the commitmentDeposit goes to the creator\n      require(tx.outputs[3].lockingBytecode == creatorLockingBytecode);\n    }\n\n    require(tx.outputs[3].value == tx.inputs[3].value);\n\n    // Ensure that the change is returned, pure BCH\n    require(tx.outputs[4].tokenCategory == 0x);\n  }\n\n /**\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract.\n   * - Input2: VoteProposalNFT from the DAO Contract\n   *   - capability: mutable\n   *   - length: 40 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Input3: TimeProposalNFT from the DAO Contract\n   *   - capability: immutable\n   *   - length: 29 bytes or 39 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 or 35 bytes)>\n   *   - category: daoCategory\n   *   - satoshis >= commitmentDeposit\n   * - Input4: Funding Utxo\n   *\n   *  -----------------------------------------------\n   *\n   *  More inputs for ADD Proposal\n   * - Input5: Minting NFT of the Upgradable Project from the DAO Contract\n   *   - capability: minting\n   *   - length: 0 bytes\n   *   - category: projectCategory\n   *\n   *  More inputs for REMOVE Proposal\n   * - Input5: authorizedThreadNFT to the Project Contract\n   *   - capability: immutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: projectCategory\n   *\n   *  More inputs for REPLACE Proposal\n   * - Input5: Minting NFT of the Upgradable Project back to DAO Contract\n   *   - capability: minting\n   *   - length: 0 bytes\n   *   - category: projectCategory\n   * - Input6: authorizedThreadNFT to the Project Contract\n   *   - capability: immutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: projectCategory\n   *\n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change.\n   * - Output2: VoteProposalNFT back to DAO Contract\n   *   - capability: mutable\n   *   - length: 40 bytes <ProposalID (4 bytes), UpdatedThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   *   - satoshis: >= commitmentDeposit (If the threadLeft is 0 and timeProposalNFT is burned)\n   *   - tokenAmount: all votes (If the threadLeft is not 0 then this tokenAmount will be 0)\n   * - Output3 TimeProposalNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: >=29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>\n   *   - category: daoCategory\n   *   - tokenAmount: all votes (If the threadLeft is not 0 then this tokenAmount will have all the votes)\n   * - Output4: Change Utxo\n   *\n   *  -----------------------------------------------\n   *\n   *  More outputs for ADD Proposal\n   * - Output5: Minting NFT of the Upgradable Project back to DAO Contract\n   *   - capability: minting\n   *   - length: 0 bytes\n   *   - category: projectCategory\n   * - Output6: New authorizedThreadNFT to the Project Contract\n   *   - capability: immutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: projectCategory\n   *\n   *  More outputs for REPLACE Proposal\n   * - Output5: Minting NFT of the Upgradable Project back to DAO Contract\n   *   - capability: minting\n   *   - length: 0 bytes\n   *   - category: projectCategory\n   * - Output6: New authorizedThreadNFT to the Project Contract\n   *   - capability: immutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: projectCategory\n   */\n  function execute() {\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the daoCategory or projectCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    // VoteProposalNFT from DAO Contract\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    // TimeProposalNFT from DAO Contract\n    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);\n    // VoteProposalNFT back to DAO Contract\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    // TimeProposalNFT back to DAO Contract\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.inputs[2].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n    // TimeProposalNFT should be immutable\n    require(tx.inputs[3].tokenCategory == daoInputCategory);\n    // VoteProposalNFT should preserve it's mutable capability\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n    require(tx.outputs[2].nftCommitment.length == tx.inputs[2].nftCommitment.length);\n\n    // voteProposalNFTLength\n    // Proposal to Add\n    // - commitment length: 40 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n    // Proposal to Remove\n    // - commitment length: 6 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes)>\n    // Proposal to Replace\n    // - commitment length: 38 bytes <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n    int voteProposalNFTLength = tx.inputs[2].nftCommitment.length;\n    require(voteProposalNFTLength == 6 || voteProposalNFTLength == 38 || voteProposalNFTLength == 40);\n\n    // Ensure that the timeProposalNFT is being used. Since each capability and length has different role.\n    // When an NFT has daoCategory, nftCommitment length 29/39 and coming from DAO contract, it's a timeProposalNFT.\n    int timeProposalNFTLength = tx.inputs[3].nftCommitment.length;\n    // <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)> or <ProposalID (4 bytes), CreatorLockingBytecode (35 bytes)>\n    require(timeProposalNFTLength == 29 || timeProposalNFTLength == 39);\n\n    // @info The timeProposalNFT first used to keep track of the proposal timer.\n    // Once that is done, it's purpose changes and it holds the votes and commitmentDeposit.\n    // Once all the threads are minted, the timeProposalNFT is burned and votes and commitmentDeposit are transferred to the voteProposalNFT.\n    \n    // If there are no votes in the timeProposalNFT then it means that this is the first time the proposal is being executed.\n    if(tx.inputs[3].tokenAmount == 0) {\n      // The proposal should have more than `voteThreshold` votes to be considered as passed.\n      require(tx.inputs[2].tokenAmount > voteThreshold);\n      // The min wait time for the proposal has been crossed and now the proposal can be executed.\n      require(tx.inputs[3].sequenceNumber >= voteWindow);\n      // Transfer the vote from timeProposalNFT to voteProposalNFT\n      require(tx.outputs[3].tokenAmount == tx.inputs[2].tokenAmount);\n      // Transfer the commitmentDeposit from timeProposalNFT to voteProposalNFT\n      require(tx.outputs[3].value == tx.inputs[2].value);\n    } else {\n      // If the execution comes here then it means that the proposal has already passed and\n      // the thread minting is underway.\n      // Keep the votes in the timeProposalNFT\n      require(tx.outputs[3].tokenAmount == tx.inputs[3].tokenAmount);\n      // Keep the commitmentDeposit in the timeProposalNFT\n      require(tx.outputs[2].value == tx.inputs[2].value);\n    }\n\n    // Break the voteProposalNFT into proposalId, threadLeft + remainingBytes\n    bytes proposalId, bytes remainingBytes0 = tx.inputs[2].nftCommitment.split(4);\n    // Ensure that the timeProposalNFT and voteProposalNFT have the same proposalId\n    require(tx.inputs[3].nftCommitment.split(4)[0] == proposalId);\n\n    bytes threadLeft = remainingBytes0.split(2)[0];\n    // Since this transaction is going to create a new authorized threadNFT,\n    // the threadLeft field in the voteProposalNFT should be decremented by 1.\n    int threadLeftAfterMint = int(threadLeft.reverse()) - 1;\n    require(threadLeftAfterMint >= 0);\n    bytes2 threadLeftBytes = bytes2(threadLeftAfterMint).reverse();\n\n    // Input4: Funding Utxo\n    require(tx.inputs[4].tokenCategory == 0x);\n    // Output4: Change pure BCH\n    require(tx.outputs[4].tokenCategory == 0x);\n    \n    if(tx.inputs[2].nftCommitment.length == 6) {\n      require(tx.outputs.length == 5);\n    } else {\n      require(tx.outputs.length == 7);\n      // Project Minting NFT from DAO Contract\n      require(tx.outputs[5].lockingBytecode == daoInputLockingBytecode);\n\n      // ProjectMinting NFT should preserve it's minting capability\n      require(tx.outputs[5].tokenCategory == tx.inputs[5].tokenCategory);\n      require(tx.outputs[5].lockingBytecode == tx.inputs[5].lockingBytecode);\n      require(tx.outputs[5].nftCommitment == 0x);\n\n      bytes remainingBytes1 = tx.inputs[2].nftCommitment.split(6)[1];\n\n      // Set the values for the output voteProposalNFT i.e only update the `threadLeft`\n      require(tx.outputs[2].nftCommitment == proposalId + threadLeftBytes + remainingBytes1);\n      // last chunk of the voteProposalNFT\n      bytes threadCount, bytes proposedScriptHash = remainingBytes1.split(2);\n\n     if(tx.inputs[2].nftCommitment.length == 38){\n        threadCount = tx.inputs[6].nftCommitment.split(6)[0].split(4)[1];\n        proposedScriptHash = remainingBytes1;\n     }\n\n      // New authorizedThreadNFT to the project contract\n      require(tx.outputs[6].nftCommitment == proposalId + threadCount + proposedScriptHash);\n      // The structure of the new authorizedThreadNFT for the project contract is\n      // <ProposalID (4 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n      require(tx.outputs[6].nftCommitment.length == 38);\n\n      // Project minting NFT should be minting and of the 'projectCategory', used to mint the output[4]\n      bytes projectInputCategory, bytes projectInputCapability = tx.inputs[5].tokenCategory.split(32);\n      require(projectInputCategory == projectCategory);\n      require(projectInputCapability == 0x02); // Minting\n\n      // New authorizedThreadNFT to the Project Contract\n      // @todo: Uncomment this, commented out because of cashscript bug\n      console.log(projectLockingBytecode);\n      // require(tx.outputs[6].lockingBytecode == projectLockingBytecode);\n      require(tx.outputs[6].tokenCategory == projectCategory);\n    }\n\n    int inputLength = 6;\n    if(tx.inputs[2].nftCommitment.length == 38) {\n      inputLength = 7;\n      // Make sure that the incoming authorizedThreadNFT has the same proposalId and the one requested to be replaced.\n      require(tx.inputs[6].nftCommitment.split(4)[0] == proposalId);\n    }\n    require(tx.inputs.length == inputLength);\n  }\n}",
  "debug": {
    "bytecode": "5479009c63c3559c69c4559c69c0519c69c0c7c0cd876900c752c75179876953c75179876952cd517a876900ce52ce01207f517a52798769007a51876953ce5179876952d1517a876953cf82770079011d9c517a01279c9b6952cf8277007901289c5179569c9b517a01269c9b6952cf567f75007a547f53cf547f537a527a876953d0009c6352d05379a16953cb5479a2696752d353d09c695179bc81009c6953cd517987696853cc53c69c6954d1008769517777777777777767547a519c69c0519c69c0c7c0cd8769c0d100876900c752c75179876953c75179876952cd5179876953cd5179876900ce52ce01207f517a52798769007a51876953ce517a876952d152ce876952d2827752cf82779c6952cf82770079569c517901269c9b517a01289c9b6953cf82770079011d9c517a01279c9b6953d0009c6352d05279a06953cb5379a26953d352d09c6953cc52c69c696753d353d09c6952cc52c69c696852cf547f53cf547f7552798769007a527f75007abc815194007900a269007a5280bc54ce00876954d100876952cf8277569c63c4559c6967c4579c6955cd5379876955d155ce876955cd55c7876955d200876952cf567f7752d2537953797e52797e87690079527f52cf827701269c6356cf567f75547f77527a757c5279517a756856d2557953797e52797e876956d2827701269c6955ce01207f51795b798769007952876956d15b7987697575757575685652cf827701269c6357517a7556cf547f755379876968c3517a9c69517777777777777768",
    "sourceMap": "54:2:124:3;;;;;55:12:55:28;:32::33;:12:::1;:4::35;56:12:56:29:0;:33::34;:12:::1;:4::36;59:12:59:33:0;:37::38;:12:::1;:4::40;60:22:60:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;66:46:66:47:0;:36::64:1;68:22:68:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;70:22:70:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;72:23:72:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;74:39:74:40:0;:29::55:1;75:73:75:74:0;:63::89:1;:96::98:0;:63::99:1;76:12:76:32:0;;:36::52;;:12:::1;:4::54;77:12:77:34:0;;:38::42;:12:::1;:4::44;79:22:79:23:0;:12::38:1;:42::58:0;;:12:::1;:4::60;81:23:81:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;85:42:85:43:0;:32::58:1;:::65;;87:12:87:33:0;;:37::39;:12:::1;:43::64:0;;:68::70;:43:::1;:12;:4::72;93:42:93:43:0;:32::58:1;:::65;;94:12:94:33:0;;:37::39;:12:::1;:43::64:0;;:68::69;:43:::1;:12;:73::94:0;;:98::100;:73:::1;:12;:4::102;97:48:97:49:0;:38::64:1;:71::72:0;:38::73:1;:::76;98:61:98:86:0;;:93::94;:61::95:1;99:82:99:83:0;:72::98:1;:105::106:0;:72::107:1;102:12:102:41:0;;:45::74;;:12:::1;:4::76;105:17:105:18:0;:7::31:1;:35::36:0;:7:::1;:38:110:5:0;107:24:107:25;:14::38:1;:42::55:0;;:14:::1;:6::57;109:24:109:25:0;:14::41:1;:45::55:0;;:14:::1;:6::57;110:11:118:5:0;112:25:112:26;:14::39:1;:53::54:0;:43::67:1;:14;:6::69;114:18:114:29:0;;:::39:1;:14::40;:44::45:0;:14:::1;:6::47;117:25:117:26:0;:14::43:1;:47::69:0;;:14:::1;:6::71;110:11:118:5;120:23:120:24:0;:12::31:1;:45::46:0;:35::53:1;:12;:4::55;123:23:123:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;54:2:124:3;;;;;;;;;209::345::0;;;;;211:12:211:33;:37::38;:12:::1;:4::40;212:22:212:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;214:23:214:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;220:46:220:47:0;:36::64:1;222:22:222:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;224:22:224:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;226:23:226:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;228:23:228:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;230:39:230:40:0;:29::55:1;231:73:231:74:0;:63::89:1;:96::98:0;:63::99:1;232:12:232:32:0;;:36::52;;:12:::1;:4::54;233:12:233:34:0;;:38::42;:12:::1;:4::44;235:22:235:23:0;:12::38:1;:42::58:0;;:12:::1;:4::60;237:23:237:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;238:23:238:24:0;:12::39:1;:::46;;:60::61:0;:50::76:1;:::83;;:12;:4::85;247:42:247:43:0;:32::58:1;:::65;;248:12:248:33:0;;:37::38;:12:::1;:42::63:0;;:67::69;:42:::1;:12;:73::94:0;;:98::100;:73:::1;:12;:4::102;252:42:252:43:0;:32::58:1;:::65;;254:12:254:33:0;;:37::39;:12:::1;:43::64:0;;:68::70;:43:::1;:12;:4::72;261:17:261:18:0;:7::31:1;:35::36:0;:7:::1;:38:270:5:0;263:24:263:25;:14::38:1;:41::54:0;;:14:::1;:6::56;265:24:265:25:0;:14::41:1;:45::55:0;;:14:::1;:6::57;267:25:267:26:0;:14::39:1;:53::54:0;:43::67:1;:14;:6::69;269:25:269:26:0;:14::33:1;:47::48:0;:37::55:1;:14;:6::57;270:11:277:5:0;274:25:274:26;:14::39:1;:53::54:0;:43::67:1;:14;:6::69;276:25:276:26:0;:14::33:1;:47::48:0;:37::55:1;:14;:6::57;270:11:277:5;280:56:280:57:0;:46::72:1;:79::80:0;:46::81:1;282:22:282:23:0;:12::38:1;:45::46:0;:12::47:1;:::50;:54::64:0;;:12:::1;:4::66;284:23:284:38:0;;:45::46;:23::47:1;:::50;287:34:287:44:0;;:::54:1;:30::55;:58::59:0;:30:::1;288:12:288:31:0;;:35::36;:12:::1;:4::38;289:36:289:55:0;;:29::56:1;;:::66;292:22:292:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;294:23:294:24:0;:12::39:1;:43::45:0;:12:::1;:4::47;296:17:296:18:0;:7::33:1;:::40;;:44::45:0;:7:::1;:47:298:5:0;297:14:297:31;:35::36;:14:::1;:6::38;298:11:336:5:0;299:14:299:31;:35::36;:14:::1;:6::38;301:25:301:26:0;:14::43:1;:47::70:0;;:14:::1;:6::72;304:25:304:26:0;:14::41:1;:55::56:0;:45::71:1;:14;:6::73;305:25:305:26:0;:14::43:1;:57::58:0;:47::75:1;:14;:6::77;306:25:306:26:0;:14::41:1;:45::47:0;:14:::1;:6::49;308:40:308:41:0;:30::56:1;:63::64:0;:30::65:1;:::68;311:25:311:26:0;:14::41:1;:45::55:0;;:58::73;;:45:::1;:76::91:0;;:45:::1;:14;:6::93;313:52:313:67:0;;:74::75;:52::76:1;315:18:315:19:0;:8::34:1;:::41;;:45::47:0;:8:::1;:48:318:6:0;316:32:316:33;:22::48:1;:55::56:0;:22::57:1;:::60;:67::68:0;:22::69:1;:::72;:8::73;;;;317:29:317:44:0;;:8::45:1;;;315:48:318:6;321:25:321:26:0;:14::41:1;:45::55:0;;:58::69;;:45:::1;:72::90:0;;:45:::1;:14;:6::92;324:25:324:26:0;:14::41:1;:::48;;:52::54:0;:14:::1;:6::56;327:75:327:76:0;:65::91:1;:98::100:0;:65::101:1;328:14:328:34:0;;:38::53;;:14:::1;:6::55;329:14:329:36:0;;:40::44;:14:::1;:6::46;335:25:335:26:0;:14::41:1;:45::60:0;;:14:::1;:6::62;298:11:336:5;;;;;;338:22:338:23:0;339:17:339:18;:7::33:1;:::40;;:44::46:0;:7:::1;:48:343:5:0;340:20:340:21;:6::22:1;;;342:24:342:25:0;:14::40:1;:47::48:0;:14::49:1;:::52;:56::66:0;;:14:::1;:6::68;339:48:343:5;344:12:344:28:0;:32::43;;:12:::1;:4::45;209:2:345:3;;;;;;;;9:0:346:1",
    "logs": [
      {
        "ip": 510,
        "line": 333,
        "data": [
          {
            "stackIndex": 11,
            "type": "bytes projectLockingBytecode",
            "ip": 510
          }
        ]
      }
    ],
    "requires": [
      {
        "ip": 12,
        "line": 55
      },
      {
        "ip": 16,
        "line": 56
      },
      {
        "ip": 20,
        "line": 59
      },
      {
        "ip": 26,
        "line": 60
      },
      {
        "ip": 34,
        "line": 68
      },
      {
        "ip": 40,
        "line": 70
      },
      {
        "ip": 46,
        "line": 72
      },
      {
        "ip": 58,
        "line": 76
      },
      {
        "ip": 63,
        "line": 77
      },
      {
        "ip": 69,
        "line": 79
      },
      {
        "ip": 75,
        "line": 81
      },
      {
        "ip": 89,
        "line": 87
      },
      {
        "ip": 108,
        "line": 94
      },
      {
        "ip": 127,
        "line": 102
      },
      {
        "ip": 138,
        "line": 107
      },
      {
        "ip": 144,
        "line": 109
      },
      {
        "ip": 151,
        "line": 112
      },
      {
        "ip": 158,
        "line": 114
      },
      {
        "ip": 164,
        "line": 117
      },
      {
        "ip": 171,
        "line": 120
      },
      {
        "ip": 176,
        "line": 123
      },
      {
        "ip": 194,
        "line": 211
      },
      {
        "ip": 200,
        "line": 212
      },
      {
        "ip": 205,
        "line": 214
      },
      {
        "ip": 213,
        "line": 222
      },
      {
        "ip": 219,
        "line": 224
      },
      {
        "ip": 225,
        "line": 226
      },
      {
        "ip": 231,
        "line": 228
      },
      {
        "ip": 243,
        "line": 232
      },
      {
        "ip": 248,
        "line": 233
      },
      {
        "ip": 254,
        "line": 235
      },
      {
        "ip": 260,
        "line": 237
      },
      {
        "ip": 270,
        "line": 238
      },
      {
        "ip": 289,
        "line": 248
      },
      {
        "ip": 303,
        "line": 254
      },
      {
        "ip": 314,
        "line": 263
      },
      {
        "ip": 320,
        "line": 265
      },
      {
        "ip": 326,
        "line": 267
      },
      {
        "ip": 332,
        "line": 269
      },
      {
        "ip": 339,
        "line": 274
      },
      {
        "ip": 345,
        "line": 276
      },
      {
        "ip": 359,
        "line": 282
      },
      {
        "ip": 375,
        "line": 288
      },
      {
        "ip": 385,
        "line": 292
      },
      {
        "ip": 390,
        "line": 294
      },
      {
        "ip": 401,
        "line": 297
      },
      {
        "ip": 406,
        "line": 299
      },
      {
        "ip": 412,
        "line": 301
      },
      {
        "ip": 418,
        "line": 304
      },
      {
        "ip": 424,
        "line": 305
      },
      {
        "ip": 429,
        "line": 306
      },
      {
        "ip": 446,
        "line": 311
      },
      {
        "ip": 487,
        "line": 321
      },
      {
        "ip": 494,
        "line": 324
      },
      {
        "ip": 504,
        "line": 328
      },
      {
        "ip": 509,
        "line": 329
      },
      {
        "ip": 515,
        "line": 335
      },
      {
        "ip": 542,
        "line": 342
      },
      {
        "ip": 548,
        "line": 344
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.2"
  },
  "updatedAt": "2025-03-09T06:55:31.886Z"
}