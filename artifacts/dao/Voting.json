{
  "contractName": "Voting",
  "constructorInputs": [],
  "abi": [
    {
      "name": "vote",
      "inputs": [
        {
          "name": "voteAmount",
          "type": "int"
        }
      ]
    },
    {
      "name": "retract",
      "inputs": []
    }
  ],
  "bytecode": "OP_DUP OP_0 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_6 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_4 OP_OUTPUTTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_ROT OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_DUP 28 OP_NUMEQUAL OP_OVER OP_6 OP_NUMEQUAL OP_BOOLOR OP_SWAP 26 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_3 OP_OUTPUTTOKENAMOUNT OP_3 OP_UTXOTOKENAMOUNT OP_3 OP_PICK OP_ADD OP_NUMEQUALVERIFY OP_4 OP_OUTPUTTOKENCOMMITMENT OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_3 OP_PICK OP_8 OP_NUM2BIN OP_REVERSEBYTES OP_CAT OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_12 OP_NUMEQUALVERIFY OP_4 OP_UTXOTOKENAMOUNT OP_2 OP_PICK OP_SUB OP_0 OP_GREATERTHAN OP_IF OP_5 OP_OUTPUTTOKENAMOUNT OP_4 OP_UTXOTOKENAMOUNT OP_3 OP_PICK OP_SUB OP_NUMEQUALVERIFY OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ELSE OP_5 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_6 OP_NUMEQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ELSE OP_1 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_5 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTVALUE OP_2 OP_UTXOVALUE OP_NUMEQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_ROT OP_EQUALVERIFY OP_DUP OP_1 OP_EQUAL OP_SWAP OP_0 OP_EQUAL OP_BOOLOR OP_VERIFY OP_3 OP_UTXOTOKENAMOUNT OP_0 OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_12 OP_NUMEQUALVERIFY OP_SWAP OP_2 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_REVERSEBYTES OP_BIN2NUM OP_2 OP_OUTPUTTOKENAMOUNT OP_2 OP_UTXOTOKENAMOUNT OP_2 OP_PICK OP_SUB OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENAMOUNT OP_3 OP_UTXOTOKENAMOUNT OP_ROT OP_ADD OP_NUMEQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\ncontract Voting() {\n  /**\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT from Controller Contract (immutable NFT with commitment that has the lockingBytecode of this contract)\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract.\n   * - Input2: Minting NFT of daoCategory from Controller Contract.\n   *   - capability: minting\n   *   - category: daoCategory\n   * - Input3: Proposal NFT of daoCategory from Controller Contract.\n   *   - capability: mutable\n   *   - length: 6/38/40 bytes\n   *   - category: daoCategory\n   * - Input4: Utxo to cast vote\n   *   - category: daoCategory\n   *   - tokenAmount: voteAmount\n   * - Input5: Funding UTXO\n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to Controller Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change.\n   * - Output2: Minting NFT of daoCategory back to Controller Contract\n   *   - capability: minting\n   *   - category: daoCategory\n   * - Output3: Proposal NFT back to Controller Contract with tokenAmount (Equal to `voteAmount`)\n   *   - capability: mutable\n   *   - length: 6/38/40 bytes\n   *   - category: daoCategory\n   * - Output4: ReceiptNFT of Vote, to be used later to get back the tokens from proposal NFT to the bytecode of Input3\n   *   - capability: immutable\n   *   - length: 12 bytes\n   *   - category: daoCategory\n   * - Output5: Change tokenAmount\n   * - Output6: Change pure BCH\n   */\n  function vote(int voteAmount) {\n    require(tx.inputs.length == 6);\n    require(tx.outputs.length <= 7);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the daoCategory or projectCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    require(tx.outputs[4].tokenCategory == daoInputCategory);\n\n    // daoMintingNFT should be minting and of the 'daoInputCategory'\n    bytes daoMintingCategory, bytes daoMintingCapability = tx.outputs[2].tokenCategory.split(32);\n    require(daoMintingCategory == daoInputCategory);\n    require(daoMintingCapability == 0x02); // Minting\n\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n\n    // The nftCommitment of the funding UTXO should be 40 bytes for AddProposal, 6 bytes for RemoveProposal and 38 bytes for ReplaceProposal\n    int voteProposalLength = tx.inputs[3].nftCommitment.length;\n    // No other length is allowed\n    require(voteProposalLength == 40 || voteProposalLength == 6 || voteProposalLength == 38);\n\n    // The voteProposalNFT gets the voteAmount added to it\n    require(tx.outputs[3].tokenAmount == tx.inputs[3].tokenAmount + voteAmount);\n\n    // Split the nftCommitment of the proposalNFT and take the first 4 bytes as the proposalId.\n    // <4 bytes of proposalId><8 bytes of voteAmount>\n    require(tx.outputs[4].nftCommitment == tx.inputs[3].nftCommitment.split(4)[0] + bytes8(voteAmount).reverse());\n    require(tx.outputs[4].nftCommitment.length == 12);\n    \n    // @todo: Uncomment this, commented out because of cashscript bug\n    // The recieptNFT should have the same lockingBytecode as the voting UTXO\n    // require(tx.inputs[4].lockingBytecode == tx.outputs[4].lockingBytecode);\n\n    if(tx.inputs[4].tokenAmount - voteAmount > 0){\n      require(tx.outputs[5].tokenAmount == tx.inputs[4].tokenAmount - voteAmount);\n      // @todo: Uncomment this, commented out because of cashscript bug\n      // require(tx.outputs[5].lockingBytecode == tx.inputs[4].lockingBytecode);\n      require(tx.outputs[6].tokenCategory == 0x);\n    } else {\n      require(tx.outputs[5].tokenCategory == 0x);\n      require(tx.outputs.length == 6);\n    }\n  }\n\n  /**\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT from Controller Contract (immutable NFT with commitment that has the lockingBytecode of this contract)\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract.\n   * - Input2: VoteProposalNFT from Controller Contract\n   *   - capability: mutable\n   *   - length: 6/38/40 bytes\n   *   - category: daoCategory\n   * - Input3: RecieptNFT used to cast vote\n   *   - capability: immutable\n   *   - length: 12 bytes\n   *   - category: daoCategory\n   * - Input4: Funding UTXO               \n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to Controller Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change.\n   * - Output2: VoteProposalNFT back to Controller Contract (minus the tokenAmount in the recieptNFT)\n   *   - capability: immutable\n   *   - length: 6/38/40 bytes\n   *   - category: daoCategory\n   * - Output3: tokenAmount to the recieptNFT provider\n   *   - category: daoCategory\n   *   - tokenAmount: voteAmount\n   * - Output4: Change pure BCH\n   */\n  function retract() {\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length <= 5);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n  \n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].value == tx.inputs[2].value);\n\n    // All NFTs should have the same category\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    require(tx.inputs[3].tokenCategory == daoInputCategory);\n    require(tx.outputs[3].tokenCategory == daoInputCategory);\n\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[2].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    // Mutable when the voting is on-going and immutable when the voting is over\n    require(voteProposalCapability == 0x01 || voteProposalCapability == 0x);\n\n    // RecieptNFT should have 0 tokenAmount\n    require(tx.inputs[3].tokenAmount == 0);\n    // Get the proposalId and voteAmount from the VoteProposalNFT\n    bytes proposalId, bytes voteAmountBytes = tx.inputs[3].nftCommitment.split(4);\n    require(tx.inputs[3].nftCommitment.length == 12);\n    // Compare projectID i.e the first 4 bytes of the nftCommitment\n    require(proposalId == tx.inputs[2].nftCommitment.split(4)[0]);\n    \n    int voteAmount = int(voteAmountBytes.reverse());\n    // VoteProposalNFT should have the voteAmount added to it\n    require(tx.outputs[2].tokenAmount == tx.inputs[2].tokenAmount - voteAmount);\n    // RecieptNFT should have the voteAmount subtracted from it\n    require(tx.outputs[3].tokenAmount == tx.inputs[3].tokenAmount + voteAmount);\n\n    // @todo: Uncomment this, commented out because of cashscript bug\n    // The recieptNFT provider should get the tokens\n    // require(tx.outputs[3].lockingBytecode == tx.inputs[3].lockingBytecode);\n\n    // Pure BCH output\n    require(tx.outputs[4].tokenCategory == 0x);\n  }\n}",
  "debug": {
    "bytecode": "0079009c63c3569c69c457a169c0519c69c0c7c0cd8769c0d100876900c752c75179876953c75179876952cd5179876953cd517a876900ce54d15179876952d101207f517a52798769007a52876953d101207f517a527a8769007a51876953cf8277007901289c5179569c9b517a01269c9b6953d353d05379939c6954d253cf547f7553795880bc7e876954d282775c9c6954d052799400a06355d354d05379949c6956d10087696755d1008769c4569c696851777767007a519c69c3559c69c455a169c0519c69c0c7c0cd876900c752c75179876952cd517a876952cc52c69c6900ce53ce5179876953d15179876952d101207f517a527a876900795187517a00879b6953d0009c6953cf547f53cf82775c9c69517a52cf547f758769007abc8152d352d05279949c6953d353d0527a939c6954d1008768",
    "sourceMap": "43:2:102:3;;;;;44:12:44:28;:32::33;:12:::1;:4::35;45:12:45:29:0;:33::34;:12:::1;:4::36;48:12:48:33:0;:37::38;:12:::1;:4::40;49:22:49:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;51:23:51:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;57:46:57:47:0;:36::64:1;58:22:58:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;59:22:59:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;60:23:60:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;61:23:61:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;63:39:63:40:0;:29::55:1;64:23:64:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;67:70:67:71:0;:59::86:1;:93::95:0;:59::96:1;68:12:68:30:0;;:34::50;;:12:::1;:4::52;69:12:69:32:0;;:36::40;:12:::1;:4::42;72:74:72:75:0;:63::90:1;:97::99:0;:63::100:1;73:12:73:32:0;;:36::52;;:12:::1;:4::54;74:12:74:34:0;;:38::42;:12:::1;:4::44;77:39:77:40:0;:29::55:1;:::62;;79:12:79:30:0;;:34::36;:12:::1;:40::58:0;;:62::63;:40:::1;:12;:67::85:0;;:89::91;:67:::1;:12;:4::93;82:23:82:24:0;:12::37:1;:51::52:0;:41::65:1;:68::78:0;;:41:::1;:12;:4::80;86:23:86:24:0;:12::39:1;:53::54:0;:43::69:1;:76::77:0;:43::78:1;:::81;:91::101:0;;:84::102:1;;:::112;:43;:12;:4::114;87:23:87:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;93:17:93:18:0;:7::31:1;:34::44:0;;:7:::1;:47::48:0;:7:::1;:49:98:5:0;94:25:94:26;:14::39:1;:53::54:0;:43::67:1;:70::80:0;;:43:::1;:14;:6::82;97:25:97:26:0;:14::41:1;:45::47:0;:14:::1;:6::49;98:11:101:5:0;99:25:99:26;:14::41:1;:45::47:0;:14:::1;:6::49;100:14:100:31:0;:35::36;:14:::1;:6::38;98:11:101:5;43:2:102:3;;;;136::184::0;;;;;137:12:137:28;:32::33;:12:::1;:4::35;138:12:138:29:0;:33::34;:12:::1;:4::36;141:12:141:33:0;:37::38;:12:::1;:4::40;142:22:142:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;148:46:148:47:0;:36::64:1;149:22:149:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;150:23:150:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;151:23:151:24:0;:12::31:1;:45::46:0;:35::53:1;:12;:4::55;154:39:154:40:0;:29::55:1;155:22:155:23:0;:12::38:1;:42::58:0;;:12:::1;:4::60;156:23:156:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;159:74:159:75:0;:63::90:1;:97::99:0;:63::100:1;160:12:160:32:0;;:36::52;;:12:::1;:4::54;162:12:162:34:0;;:38::42;:12:::1;:46::68:0;;:72::74;:46:::1;:12;:4::76;165:22:165:23:0;:12::36:1;:40::41:0;:12:::1;:4::43;167:56:167:57:0;:46::72:1;:79::80:0;:46::81:1;168:22:168:23:0;:12::38:1;:::45;;:49::51:0;:12:::1;:4::53;170:12:170:22:0;;:36::37;:26::52:1;:59::60:0;:26::61:1;:::64;:12;:4::66;172:25:172:40:0;;:::50:1;:21::51;174:23:174:24:0;:12::37:1;:51::52:0;:41::65:1;:68::78:0;;:41:::1;:12;:4::80;176:23:176:24:0;:12::37:1;:51::52:0;:41::65:1;:68::78:0;;:41:::1;:12;:4::80;183:23:183:24:0;:12::39:1;:43::45:0;:12:::1;3:0:185:1",
    "logs": [],
    "requires": [
      {
        "ip": 8,
        "line": 44
      },
      {
        "ip": 12,
        "line": 45
      },
      {
        "ip": 16,
        "line": 48
      },
      {
        "ip": 22,
        "line": 49
      },
      {
        "ip": 27,
        "line": 51
      },
      {
        "ip": 35,
        "line": 58
      },
      {
        "ip": 41,
        "line": 59
      },
      {
        "ip": 47,
        "line": 60
      },
      {
        "ip": 53,
        "line": 61
      },
      {
        "ip": 61,
        "line": 64
      },
      {
        "ip": 71,
        "line": 68
      },
      {
        "ip": 76,
        "line": 69
      },
      {
        "ip": 86,
        "line": 73
      },
      {
        "ip": 91,
        "line": 74
      },
      {
        "ip": 110,
        "line": 79
      },
      {
        "ip": 119,
        "line": 82
      },
      {
        "ip": 134,
        "line": 86
      },
      {
        "ip": 141,
        "line": 87
      },
      {
        "ip": 158,
        "line": 94
      },
      {
        "ip": 163,
        "line": 97
      },
      {
        "ip": 169,
        "line": 99
      },
      {
        "ip": 173,
        "line": 100
      },
      {
        "ip": 187,
        "line": 137
      },
      {
        "ip": 191,
        "line": 138
      },
      {
        "ip": 195,
        "line": 141
      },
      {
        "ip": 201,
        "line": 142
      },
      {
        "ip": 209,
        "line": 149
      },
      {
        "ip": 215,
        "line": 150
      },
      {
        "ip": 221,
        "line": 151
      },
      {
        "ip": 229,
        "line": 155
      },
      {
        "ip": 235,
        "line": 156
      },
      {
        "ip": 245,
        "line": 160
      },
      {
        "ip": 255,
        "line": 162
      },
      {
        "ip": 260,
        "line": 165
      },
      {
        "ip": 271,
        "line": 168
      },
      {
        "ip": 280,
        "line": 170
      },
      {
        "ip": 293,
        "line": 174
      },
      {
        "ip": 302,
        "line": 176
      },
      {
        "ip": 307,
        "line": 183
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.2"
  },
  "updatedAt": "2025-03-09T11:51:16.253Z"
}