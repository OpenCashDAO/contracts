{
  "contractName": "ExecuteProposal",
  "constructorInputs": [
    {
      "name": "voteThreshold",
      "type": "int"
    },
    {
      "name": "voteWindow",
      "type": "int"
    },
    {
      "name": "projectCategory",
      "type": "bytes32"
    },
    {
      "name": "projectLockingBytecode",
      "type": "bytes"
    }
  ],
  "abi": [
    {
      "name": "test",
      "inputs": []
    },
    {
      "name": "toAdd",
      "inputs": []
    },
    {
      "name": "toRemove",
      "inputs": []
    },
    {
      "name": "toReplace",
      "inputs": []
    },
    {
      "name": "failProposal",
      "inputs": []
    }
  ],
  "bytecode": "OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_2 OP_2 OP_NUMEQUALVERIFY OP_2DROP OP_2DROP OP_DROP OP_1 OP_ELSE OP_4 OP_PICK OP_1 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_4 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_3 OP_OUTPUTTOKENAMOUNT OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_LESSTHANOREQUAL OP_VERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_2 OP_SPLIT OP_2 OP_SPLIT OP_4 OP_INPUTSEQUENCENUMBER OP_5 OP_ROLL OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_4 OP_PICK OP_EQUALVERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 1d OP_NUMEQUALVERIFY OP_ROT OP_BIN2NUM OP_1SUB OP_DUP OP_3 OP_PICK OP_BIN2NUM OP_LESSTHANOREQUAL OP_VERIFY OP_DUP OP_SIZE OP_NIP OP_2 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_4 OP_PICK OP_ROT OP_CAT OP_3 OP_PICK OP_CAT OP_2 OP_PICK OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 28 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_2SWAP OP_CAT OP_ROT OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTBYTECODE OP_ROT OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_NUMEQUAL OP_IF OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_DROP OP_1 OP_ELSE OP_4 OP_PICK OP_2 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_4 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_3 OP_OUTPUTTOKENAMOUNT OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_2 OP_SPLIT OP_2 OP_SPLIT OP_4 OP_INPUTSEQUENCENUMBER OP_6 OP_ROLL OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_4 OP_PICK OP_EQUALVERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 1d OP_NUMEQUALVERIFY OP_ROT OP_BIN2NUM OP_1SUB OP_DUP OP_3 OP_PICK OP_BIN2NUM OP_LESSTHANOREQUAL OP_VERIFY OP_DUP OP_SIZE OP_NIP OP_2 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_4 OP_PICK OP_ROT OP_CAT OP_3 OP_PICK OP_CAT OP_2 OP_PICK OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 28 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_2SWAP OP_CAT OP_ROT OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTBYTECODE OP_3 OP_ROLL OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_ROT OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_NUMEQUAL OP_IF OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ELSE OP_4 OP_PICK OP_3 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_4 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_3 OP_UTXOTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENAMOUNT OP_3 OP_OUTPUTTOKENAMOUNT OP_NUMEQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_2 OP_SPLIT OP_2 OP_SPLIT OP_4 OP_INPUTSEQUENCENUMBER OP_6 OP_ROLL OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_DROP OP_4 OP_PICK OP_EQUALVERIFY OP_4 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP 1d OP_NUMEQUALVERIFY OP_ROT OP_BIN2NUM OP_1SUB OP_DUP OP_3 OP_PICK OP_BIN2NUM OP_LESSTHANOREQUAL OP_VERIFY OP_DUP OP_SIZE OP_NIP OP_2 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_4 OP_PICK OP_ROT OP_CAT OP_3 OP_PICK OP_CAT OP_2 OP_PICK OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 28 OP_NUMEQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_3 OP_UTXOTOKENCOMMITMENT OP_SIZE OP_NIP OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_2SWAP OP_CAT OP_ROT OP_CAT OP_EQUALVERIFY OP_5 OP_OUTPUTBYTECODE OP_3 OP_ROLL OP_EQUALVERIFY OP_5 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_ROT OP_EQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_NUMEQUAL OP_IF OP_6 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_1 OP_ELSE OP_4 OP_ROLL OP_4 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_2 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2DROP OP_2DROP OP_1 OP_ENDIF OP_ENDIF OP_ENDIF OP_ENDIF",
  "source": "/**\n * @param voteThreshold - The minimum number of votes required for the proposal to pass.\n * @param voteWindow - The minimum time window during which votes can be cast.\n * @param projectCategory - The category of the project for which the proposal is being applied. [reversed]\n * @param projectScriptHash - The script hash of the project for which the proposal is being applied.\n */\ncontract ExecuteProposal(\n  int voteThreshold,\n  int voteWindow,\n  bytes32 projectCategory,\n  bytes projectLockingBytecode\n) {\n\n  function test(){\n    require(2==2);\n  }\n\n /**\n   * This is called when the proposal intends to add a new contract to the project.\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract.\n   * - Input2: Minting NFT of the project\n   * - Input3: VoteProposalNFT\n   * - Input4: TimeProposalNFT\n   * - Input5: Funding UTXO\n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   * - Output1: Input1 back to this contract without any change.\n   * - Output2: Minting NFT back to DAO Contract\n   * - Output3: VoteProposalNFT back to DAO Contract\n   * - Output4: TimeProposalNFT back to DAO Contract\n   * - Output5: authorizedThreadNFT to the Project Contract\n   * - Output6: Change pure BCH\n   */\n  function toAdd() {\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length <= 7);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the domainCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[4].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);\n\n    // Project minting NFT should be minting and of the 'projectCategory', used to mint the output[5]\n    bytes projectInputCategory, bytes projectInputCapability = tx.inputs[2].tokenCategory.split(32);\n    require(projectInputCategory == projectCategory);\n    require(projectInputCapability == 0x02); // Minting\n    // ProjectMinting NFT should go back to the DAO Contract without change\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n    \n    // Check ProposalNFTs categories\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.inputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n    require(tx.inputs[4].tokenCategory == daoInputCategory);\n    require(tx.outputs[3].tokenCategory == daoInputCategory);\n\n    // The vote amount should stay the same.\n    require(tx.inputs[3].tokenAmount == tx.outputs[3].tokenAmount);\n\n    // This condition is responsible for the proposal passing.\n    require(tx.inputs[3].tokenAmount >= voteThreshold);\n\n    // New authorizedThreadNFT to the project contract\n    bytes proposalId, bytes remainingBytes0 = tx.inputs[3].nftCommitment.split(4);\n    bytes threadLeft, bytes remainingBytes1 = remainingBytes0.split(2);\n    bytes threadCount, bytes proposedScriptHash = remainingBytes1.split(2);\n\n    // TimeProposalNFT\n    // The min wait time for the proposal has been crossed and now the proposal can be executed.\n    require(tx.inputs[4].sequenceNumber >= voteWindow);\n    require(tx.inputs[4].nftCommitment.split(4)[0] == proposalId);\n    require(tx.inputs[4].nftCommitment.length == 29);\n\n    int newThreadLeft = int(threadLeft) - 1;\n    require(newThreadLeft <= int(threadCount));\n    bytes newThreadLeftBytes = bytes(newThreadLeft);\n    require(newThreadLeftBytes.length == 2);\n\n    require(tx.outputs[3].nftCommitment == proposalId + newThreadLeftBytes + threadCount + proposedScriptHash);\n    require(tx.outputs[3].nftCommitment.length == 40);\n    require(tx.outputs[3].nftCommitment.length == tx.inputs[3].nftCommitment.length);\n\n    require(tx.outputs[5].nftCommitment == proposalId + threadCount + proposedScriptHash);\n    require(tx.outputs[5].lockingBytecode == projectLockingBytecode);\n    require(tx.outputs[5].nftCommitment.length == 39);\n    require(tx.outputs[5].tokenCategory == projectCategory);\n\n    if(tx.outputs.length == 7) {\n      // Output6: Change pure BCH\n      require(tx.outputs[6].tokenCategory == 0x);\n    }\n\n  }\n\n /**\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract.\n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   * - Output1: Input1 back to this contract without any change.\n   */\n  function toRemove() {\n    //  * If the proposalNFT is mutable AND threadLeft is 0 then the voting is still happening.\n    //  * If the proposalNFT is mutable AND threadLeft is not 0 then the proposal has passed and the threadCount is updated and it needs to go through the ExecuteProposal contract.\n    //  * If the proposalNFT is immutable then it's finalised and all the threads are dealt with.\n\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length <= 7);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the domainCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[4].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);\n\n    // Project minting NFT should be minting and of the 'projectCategory', used to mint the output[5]\n    bytes projectInputCategory, bytes projectInputCapability = tx.inputs[2].tokenCategory.split(32);\n    require(projectInputCategory == projectCategory);\n    require(projectInputCapability == 0x02); // Minting\n    // ProjectMinting NFT should go back to the DAO Contract without change\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n    \n    // Check ProposalNFTs categories\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.inputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n    require(tx.inputs[4].tokenCategory == daoInputCategory);\n    require(tx.outputs[3].tokenCategory == daoInputCategory);\n\n    // The vote amount should stay the same.\n    require(tx.inputs[3].tokenAmount == tx.outputs[3].tokenAmount);\n\n    // New authorizedThreadNFT to the project contract\n    bytes proposalId, bytes remainingBytes0 = tx.inputs[3].nftCommitment.split(4);\n    bytes threadLeft, bytes remainingBytes1 = remainingBytes0.split(2);\n    bytes threadCount, bytes proposedScriptHash = remainingBytes1.split(2);\n\n    // TimeProposalNFT\n    // The min wait time for the proposal has been crossed and now the proposal can be executed.\n    require(tx.inputs[4].sequenceNumber >= voteWindow);\n    require(tx.inputs[4].nftCommitment.split(4)[0] == proposalId);\n    require(tx.inputs[4].nftCommitment.length == 29);\n\n    int newThreadLeft = int(threadLeft) - 1;\n    require(newThreadLeft <= int(threadCount));\n    bytes newThreadLeftBytes = bytes(newThreadLeft);\n    require(newThreadLeftBytes.length == 2);\n\n    require(tx.outputs[3].nftCommitment == proposalId + newThreadLeftBytes + threadCount + proposedScriptHash);\n    require(tx.outputs[3].nftCommitment.length == 40);\n    require(tx.outputs[3].nftCommitment.length == tx.inputs[3].nftCommitment.length);\n\n    require(tx.outputs[5].nftCommitment == proposalId + threadCount + proposedScriptHash);\n    require(tx.outputs[5].lockingBytecode == projectLockingBytecode);\n    require(tx.outputs[5].nftCommitment.length == 39);\n    require(tx.outputs[5].tokenCategory == projectCategory);\n\n    if(tx.outputs.length == 7) {\n      // Output6: Change pure BCH\n      require(tx.outputs[6].tokenCategory == 0x);\n    }\n\n  }\n\n  /**\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   * - Input1: Any input from this contract.\n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   * - Output1: Input1 back to this contract without any change.\n   */\n  function toReplace() {\n    //  * If the proposalNFT is mutable AND threadLeft is 0 then the voting is still happening.\n    //  * If the proposalNFT is mutable AND threadLeft is not 0 then the proposal has passed and the threadCount is updated and it needs to go through the ExecuteProposal contract.\n    //  * If the proposalNFT is immutable then it's finalised and all the threads are dealt with.\n\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length <= 7);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the domainCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Registry contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.inputs[4].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);\n\n    // Project minting NFT should be minting and of the 'projectCategory', used to mint the output[5]\n    bytes projectInputCategory, bytes projectInputCapability = tx.inputs[2].tokenCategory.split(32);\n    require(projectInputCategory == projectCategory);\n    require(projectInputCapability == 0x02); // Minting\n    // ProjectMinting NFT should go back to the DAO Contract without change\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n    \n    // Check ProposalNFTs categories\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.inputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n    require(tx.inputs[4].tokenCategory == daoInputCategory);\n    require(tx.outputs[3].tokenCategory == daoInputCategory);\n\n    // The vote amount should stay the same.\n    require(tx.inputs[3].tokenAmount == tx.outputs[3].tokenAmount);\n\n    // New authorizedThreadNFT to the project contract\n    bytes proposalId, bytes remainingBytes0 = tx.inputs[3].nftCommitment.split(4);\n    bytes threadLeft, bytes remainingBytes1 = remainingBytes0.split(2);\n    bytes threadCount, bytes proposedScriptHash = remainingBytes1.split(2);\n\n    // TimeProposalNFT\n    // The min wait time for the proposal has been crossed and now the proposal can be executed.\n    require(tx.inputs[4].sequenceNumber >= voteWindow);\n    require(tx.inputs[4].nftCommitment.split(4)[0] == proposalId);\n    require(tx.inputs[4].nftCommitment.length == 29);\n\n    int newThreadLeft = int(threadLeft) - 1;\n    require(newThreadLeft <= int(threadCount));\n    bytes newThreadLeftBytes = bytes(newThreadLeft);\n    require(newThreadLeftBytes.length == 2);\n\n    require(tx.outputs[3].nftCommitment == proposalId + newThreadLeftBytes + threadCount + proposedScriptHash);\n    require(tx.outputs[3].nftCommitment.length == 40);\n    require(tx.outputs[3].nftCommitment.length == tx.inputs[3].nftCommitment.length);\n\n    require(tx.outputs[5].nftCommitment == proposalId + threadCount + proposedScriptHash);\n    require(tx.outputs[5].lockingBytecode == projectLockingBytecode);\n    require(tx.outputs[5].nftCommitment.length == 39);\n    require(tx.outputs[5].tokenCategory == projectCategory);\n\n    if(tx.outputs.length == 7) {\n      // Output6: Change pure BCH\n      require(tx.outputs[6].tokenCategory == 0x);\n    }\n\n  }\n\n  /**\n  * @inputs\n  * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n  * - Input1: Any input from this contract.\n  * \n  * @outputs\n  * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n  * - Output1: Input1 back to this contract without any change.\n  */\n  function failProposal() {\n    require(tx.inputs.length == 2);\n    require(tx.outputs.length <= 2);\n\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n  }\n\n  // function replaceThreads() {}\n\n  // function removeThreads() {}\n\n  // function mintThreads() {}\n\n}",
  "debug": {
    "bytecode": "5479009c6352529c69517777777777675479519c63c3559c69c457a169c0519c69c0c7c0cd8769c0d100876900c752c75179876953c75179876954c75179876952cd5179876953cd5179876954cd517a876952ce01207f517a54798769007a52876952d152ce876900ce53ce01207f517a52798769007a51876954ce5179876953d1517a876953d053d39c6953d0517aa26953cf547f007a527f007a527f54cb557aa26954cf547f755479876954cf8277011d9c69527a8151940079537981a169007a00798277529c6953d25479527a7e53797e52797e876953d2827701289c6953d2827753cf82779c6955d2537a537a7e527a7e876955cd527a876955d2827701279c6955d1517a8769c4579c6356d1008769685177675479529c63c3559c69c457a169c0519c69c0c7c0cd8769c0d100876900c752c75179876953c75179876954c75179876952cd5179876953cd5179876954cd517a876952ce01207f517a54798769007a52876952d152ce876900ce53ce01207f517a52798769007a51876954ce5179876953d1517a876953d053d39c6953cf547f007a527f007a527f54cb567aa26954cf547f755479876954cf8277011d9c69527a8151940079537981a169007a00798277529c6953d25479527a7e53797e52797e876953d2827701289c6953d2827753cf82779c6955d2537a537a7e527a7e876955cd537a876955d2827701279c6955d1527a8769c4579c6356d100876968517777675479539c63c3559c69c457a169c0519c69c0c7c0cd8769c0d100876900c752c75179876953c75179876954c75179876952cd5179876953cd5179876954cd517a876952ce01207f517a54798769007a52876952d152ce876900ce53ce01207f517a52798769007a51876954ce5179876953d1517a876953d053d39c6953cf547f007a527f007a527f54cb567aa26954cf547f755479876954cf8277011d9c69527a8151940079537981a169007a00798277529c6953d25479527a7e53797e52797e876953d2827701289c6953d2827753cf82779c6955d2537a537a7e527a7e876955cd537a876955d2827701279c6955d1527a8769c4579c6356d10087696851777767547a549c69c3529c69c452a169c0519c69c0c7c0cd8769517777777768686868",
    "sourceMap": "14:2:16:3;;;;;15:12:15:13;:15::16;:12:::1;:4::18;14:2:16:3;;;;;;;37::111::0;;;;;38:12:38:28;:32::33;:12:::1;:4::35;39:12:39:29:0;:33::34;:12:::1;:4::36;42:12:42:33:0;:37::38;:12:::1;:4::40;43:22:43:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;45:23:45:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;51:46:51:47:0;:36::64:1;52:22:52:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;53:22:53:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;54:22:54:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;55:23:55:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;56:23:56:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;57:23:57:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;60:73:60:74:0;:63::89:1;:96::98:0;:63::99:1;61:12:61:32:0;;:36::51;;:12:::1;:4::53;62:12:62:34:0;;:38::42;:12:::1;:4::44;64:23:64:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;67:39:67:40:0;:29::55:1;69:73:69:74:0;:63::89:1;:96::98:0;:63::99:1;70:12:70:32:0;;:36::52;;:12:::1;:4::54;71:12:71:34:0;;:38::42;:12:::1;:4::44;72:22:72:23:0;:12::38:1;:42::58:0;;:12:::1;:4::60;73:23:73:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;76:22:76:23:0;:12::36:1;:51::52:0;:40::65:1;:12;:4::67;79:22:79:23:0;:12::36:1;:40::53:0;;:12:::1;:4::55;82:56:82:57:0;:46::72:1;:79::80:0;:46::81:1;83::83:61:0;;:68::69;:46::70:1;84:50:84:65:0;;:72::73;:50::74:1;88:22:88:23:0;:12::39:1;:43::53:0;;:12:::1;:4::55;89:22:89:23:0;:12::38:1;:45::46:0;:12::47:1;:::50;:54::64:0;;:12:::1;:4::66;90:22:90:23:0;:12::38:1;:::45;;:49::51:0;:12:::1;:4::53;92:28:92:38:0;;:24::39:1;:42::43:0;:24:::1;93:12:93:25:0;;:33::44;;:29::45:1;:12;:4::47;94:37:94:50:0;;95:12:95:30;;:::37:1;;:41::42:0;:12:::1;:4::44;97:23:97:24:0;:12::39:1;:43::53:0;;:56::74;;:43:::1;:77::88:0;;:43:::1;:91::109:0;;:43:::1;:12;:4::111;98:23:98:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;99:23:99:24:0;:12::39:1;:::46;;:60::61:0;:50::76:1;:::83;;:12;:4::85;101:23:101:24:0;:12::39:1;:43::53:0;;:56::67;;:43:::1;:70::88:0;;:43:::1;:12;:4::90;102:23:102:24:0;:12::41:1;:45::67:0;;:12:::1;:4::69;103:23:103:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;104:23:104:24:0;:12::39:1;:43::58:0;;:12:::1;:4::60;106:7:106:24:0;:28::29;:7:::1;:31:109:5:0;108:25:108:26;:14::41:1;:45::47:0;:14:::1;:6::49;106:31:109:5;37:2:111:3;;;122::197::0;;;;;127:12:127:28;:32::33;:12:::1;:4::35;128:12:128:29:0;:33::34;:12:::1;:4::36;131:12:131:33:0;:37::38;:12:::1;:4::40;132:22:132:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;134:23:134:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;140:46:140:47:0;:36::64:1;141:22:141:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;142:22:142:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;143:22:143:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;144:23:144:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;145:23:145:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;146:23:146:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;149:73:149:74:0;:63::89:1;:96::98:0;:63::99:1;150:12:150:32:0;;:36::51;;:12:::1;:4::53;151:12:151:34:0;;:38::42;:12:::1;:4::44;153:23:153:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;156:39:156:40:0;:29::55:1;158:73:158:74:0;:63::89:1;:96::98:0;:63::99:1;159:12:159:32:0;;:36::52;;:12:::1;:4::54;160:12:160:34:0;;:38::42;:12:::1;:4::44;161:22:161:23:0;:12::38:1;:42::58:0;;:12:::1;:4::60;162:23:162:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;165:22:165:23:0;:12::36:1;:51::52:0;:40::65:1;:12;:4::67;168:56:168:57:0;:46::72:1;:79::80:0;:46::81:1;169::169:61:0;;:68::69;:46::70:1;170:50:170:65:0;;:72::73;:50::74:1;174:22:174:23:0;:12::39:1;:43::53:0;;:12:::1;:4::55;175:22:175:23:0;:12::38:1;:45::46:0;:12::47:1;:::50;:54::64:0;;:12:::1;:4::66;176:22:176:23:0;:12::38:1;:::45;;:49::51:0;:12:::1;:4::53;178:28:178:38:0;;:24::39:1;:42::43:0;:24:::1;179:12:179:25:0;;:33::44;;:29::45:1;:12;:4::47;180:37:180:50:0;;181:12:181:30;;:::37:1;;:41::42:0;:12:::1;:4::44;183:23:183:24:0;:12::39:1;:43::53:0;;:56::74;;:43:::1;:77::88:0;;:43:::1;:91::109:0;;:43:::1;:12;:4::111;184:23:184:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;185:23:185:24:0;:12::39:1;:::46;;:60::61:0;:50::76:1;:::83;;:12;:4::85;187:23:187:24:0;:12::39:1;:43::53:0;;:56::67;;:43:::1;:70::88:0;;:43:::1;:12;:4::90;188:23:188:24:0;:12::41:1;:45::67:0;;:12:::1;:4::69;189:23:189:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;190:23:190:24:0;:12::39:1;:43::58:0;;:12:::1;:4::60;192:7:192:24:0;:28::29;:7:::1;:31:195:5:0;194:25:194:26;:14::41:1;:45::47:0;:14:::1;:6::49;192:31:195:5;122:2:197:3;;;;208::283::0;;;;;213:12:213:28;:32::33;:12:::1;:4::35;214:12:214:29:0;:33::34;:12:::1;:4::36;217:12:217:33:0;:37::38;:12:::1;:4::40;218:22:218:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;220:23:220:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;226:46:226:47:0;:36::64:1;227:22:227:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;228:22:228:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;229:22:229:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;230:23:230:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;231:23:231:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;232:23:232:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;235:73:235:74:0;:63::89:1;:96::98:0;:63::99:1;236:12:236:32:0;;:36::51;;:12:::1;:4::53;237:12:237:34:0;;:38::42;:12:::1;:4::44;239:23:239:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;242:39:242:40:0;:29::55:1;244:73:244:74:0;:63::89:1;:96::98:0;:63::99:1;245:12:245:32:0;;:36::52;;:12:::1;:4::54;246:12:246:34:0;;:38::42;:12:::1;:4::44;247:22:247:23:0;:12::38:1;:42::58:0;;:12:::1;:4::60;248:23:248:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;251:22:251:23:0;:12::36:1;:51::52:0;:40::65:1;:12;:4::67;254:56:254:57:0;:46::72:1;:79::80:0;:46::81:1;255::255:61:0;;:68::69;:46::70:1;256:50:256:65:0;;:72::73;:50::74:1;260:22:260:23:0;:12::39:1;:43::53:0;;:12:::1;:4::55;261:22:261:23:0;:12::38:1;:45::46:0;:12::47:1;:::50;:54::64:0;;:12:::1;:4::66;262:22:262:23:0;:12::38:1;:::45;;:49::51:0;:12:::1;:4::53;264:28:264:38:0;;:24::39:1;:42::43:0;:24:::1;265:12:265:25:0;;:33::44;;:29::45:1;:12;:4::47;266:37:266:50:0;;267:12:267:30;;:::37:1;;:41::42:0;:12:::1;:4::44;269:23:269:24:0;:12::39:1;:43::53:0;;:56::74;;:43:::1;:77::88:0;;:43:::1;:91::109:0;;:43:::1;:12;:4::111;270:23:270:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;271:23:271:24:0;:12::39:1;:::46;;:60::61:0;:50::76:1;:::83;;:12;:4::85;273:23:273:24:0;:12::39:1;:43::53:0;;:56::67;;:43:::1;:70::88:0;;:43:::1;:12;:4::90;274:23:274:24:0;:12::41:1;:45::67:0;;:12:::1;:4::69;275:23:275:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;276:23:276:24:0;:12::39:1;:43::58:0;;:12:::1;:4::60;278:7:278:24:0;:28::29;:7:::1;:31:281:5:0;280:25:280:26;:14::41:1;:45::47:0;:14:::1;:6::49;278:31:281:5;208:2:283:3;;;;294::300::0;;;;;295:12:295:28;:32::33;:12:::1;:4::35;296:12:296:29:0;:33::34;:12:::1;:4::36;298:12:298:33:0;:37::38;:12:::1;:4::40;299:22:299:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;294:2:300:3;;;;;7:0:308:1;;;",
    "logs": [],
    "requires": [
      {
        "ip": 12,
        "line": 15
      },
      {
        "ip": 28,
        "line": 38
      },
      {
        "ip": 32,
        "line": 39
      },
      {
        "ip": 36,
        "line": 42
      },
      {
        "ip": 42,
        "line": 43
      },
      {
        "ip": 47,
        "line": 45
      },
      {
        "ip": 55,
        "line": 52
      },
      {
        "ip": 61,
        "line": 53
      },
      {
        "ip": 67,
        "line": 54
      },
      {
        "ip": 73,
        "line": 55
      },
      {
        "ip": 79,
        "line": 56
      },
      {
        "ip": 85,
        "line": 57
      },
      {
        "ip": 95,
        "line": 61
      },
      {
        "ip": 100,
        "line": 62
      },
      {
        "ip": 106,
        "line": 64
      },
      {
        "ip": 118,
        "line": 70
      },
      {
        "ip": 123,
        "line": 71
      },
      {
        "ip": 129,
        "line": 72
      },
      {
        "ip": 135,
        "line": 73
      },
      {
        "ip": 141,
        "line": 76
      },
      {
        "ip": 147,
        "line": 79
      },
      {
        "ip": 165,
        "line": 88
      },
      {
        "ip": 174,
        "line": 89
      },
      {
        "ip": 181,
        "line": 90
      },
      {
        "ip": 193,
        "line": 93
      },
      {
        "ip": 202,
        "line": 95
      },
      {
        "ip": 217,
        "line": 97
      },
      {
        "ip": 224,
        "line": 98
      },
      {
        "ip": 234,
        "line": 99
      },
      {
        "ip": 246,
        "line": 101
      },
      {
        "ip": 252,
        "line": 102
      },
      {
        "ip": 259,
        "line": 103
      },
      {
        "ip": 265,
        "line": 104
      },
      {
        "ip": 274,
        "line": 108
      },
      {
        "ip": 287,
        "line": 127
      },
      {
        "ip": 291,
        "line": 128
      },
      {
        "ip": 295,
        "line": 131
      },
      {
        "ip": 301,
        "line": 132
      },
      {
        "ip": 306,
        "line": 134
      },
      {
        "ip": 314,
        "line": 141
      },
      {
        "ip": 320,
        "line": 142
      },
      {
        "ip": 326,
        "line": 143
      },
      {
        "ip": 332,
        "line": 144
      },
      {
        "ip": 338,
        "line": 145
      },
      {
        "ip": 344,
        "line": 146
      },
      {
        "ip": 354,
        "line": 150
      },
      {
        "ip": 359,
        "line": 151
      },
      {
        "ip": 365,
        "line": 153
      },
      {
        "ip": 377,
        "line": 159
      },
      {
        "ip": 382,
        "line": 160
      },
      {
        "ip": 388,
        "line": 161
      },
      {
        "ip": 394,
        "line": 162
      },
      {
        "ip": 400,
        "line": 165
      },
      {
        "ip": 418,
        "line": 174
      },
      {
        "ip": 427,
        "line": 175
      },
      {
        "ip": 434,
        "line": 176
      },
      {
        "ip": 446,
        "line": 179
      },
      {
        "ip": 455,
        "line": 181
      },
      {
        "ip": 470,
        "line": 183
      },
      {
        "ip": 477,
        "line": 184
      },
      {
        "ip": 487,
        "line": 185
      },
      {
        "ip": 499,
        "line": 187
      },
      {
        "ip": 505,
        "line": 188
      },
      {
        "ip": 512,
        "line": 189
      },
      {
        "ip": 518,
        "line": 190
      },
      {
        "ip": 527,
        "line": 194
      },
      {
        "ip": 541,
        "line": 213
      },
      {
        "ip": 545,
        "line": 214
      },
      {
        "ip": 549,
        "line": 217
      },
      {
        "ip": 555,
        "line": 218
      },
      {
        "ip": 560,
        "line": 220
      },
      {
        "ip": 568,
        "line": 227
      },
      {
        "ip": 574,
        "line": 228
      },
      {
        "ip": 580,
        "line": 229
      },
      {
        "ip": 586,
        "line": 230
      },
      {
        "ip": 592,
        "line": 231
      },
      {
        "ip": 598,
        "line": 232
      },
      {
        "ip": 608,
        "line": 236
      },
      {
        "ip": 613,
        "line": 237
      },
      {
        "ip": 619,
        "line": 239
      },
      {
        "ip": 631,
        "line": 245
      },
      {
        "ip": 636,
        "line": 246
      },
      {
        "ip": 642,
        "line": 247
      },
      {
        "ip": 648,
        "line": 248
      },
      {
        "ip": 654,
        "line": 251
      },
      {
        "ip": 672,
        "line": 260
      },
      {
        "ip": 681,
        "line": 261
      },
      {
        "ip": 688,
        "line": 262
      },
      {
        "ip": 700,
        "line": 265
      },
      {
        "ip": 709,
        "line": 267
      },
      {
        "ip": 724,
        "line": 269
      },
      {
        "ip": 731,
        "line": 270
      },
      {
        "ip": 741,
        "line": 271
      },
      {
        "ip": 753,
        "line": 273
      },
      {
        "ip": 759,
        "line": 274
      },
      {
        "ip": 766,
        "line": 275
      },
      {
        "ip": 772,
        "line": 276
      },
      {
        "ip": 781,
        "line": 280
      },
      {
        "ip": 795,
        "line": 295
      },
      {
        "ip": 799,
        "line": 296
      },
      {
        "ip": 803,
        "line": 298
      },
      {
        "ip": 809,
        "line": 299
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.1"
  },
  "updatedAt": "2025-03-02T08:41:36.490Z"
}