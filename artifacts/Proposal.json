{
  "contractName": "Proposal",
  "constructorInputs": [
    {
      "name": "minCommitmentDeposit",
      "type": "int"
    }
  ],
  "abi": [
    {
      "name": "add",
      "inputs": [
        {
          "name": "proposalScriptHash",
          "type": "bytes"
        },
        {
          "name": "threadCount",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "remove",
      "inputs": []
    },
    {
      "name": "replace",
      "inputs": [
        {
          "name": "proposalScriptHash",
          "type": "bytes"
        }
      ]
    }
  ],
  "bytecode": "OP_OVER OP_0 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_4 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_7 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_2 OP_PICK OP_SIZE OP_NIP 20 OP_NUMEQUALVERIFY OP_3 OP_PICK OP_SIZE OP_NIP OP_2 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_REVERSEBYTES OP_BIN2NUM OP_2 OP_UTXOTOKENCOMMITMENT OP_REVERSEBYTES OP_BIN2NUM OP_1ADD OP_NUMEQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_4 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_2 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_3 OP_UTXOVALUE OP_OVER OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_OUTPUTVALUE OP_LESSTHANOREQUAL OP_VERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_2 OP_OUTPUTTOKENCOMMITMENT OP_4 OP_PICK OP_CAT OP_4 OP_ROLL OP_CAT OP_3 OP_ROLL OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 28 OP_NUMEQUALVERIFY OP_3 OP_UTXOBYTECODE OP_SIZE OP_NIP 23 OP_NUMEQUAL OP_3 OP_UTXOBYTECODE OP_SIZE OP_NIP 19 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_4 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 1d OP_NUMEQUAL OP_4 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_5 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_5 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_ELSE OP_OVER OP_1 OP_NUMEQUAL OP_IF OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_8 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_2 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_4 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_2 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_4 OP_UTXOVALUE OP_OVER OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_OUTPUTVALUE OP_LESSTHANOREQUAL OP_VERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_3 OP_UTXOTOKENCOMMITMENT OP_6 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_6 OP_NUMEQUALVERIFY OP_3 OP_UTXOBYTECODE OP_SIZE OP_NIP 23 OP_NUMEQUAL OP_3 OP_UTXOBYTECODE OP_SIZE OP_NIP 19 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_4 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 1d OP_NUMEQUAL OP_4 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_3 OP_UTXOBYTECODE OP_5 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_5 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_5 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_3 OP_UTXOVALUE OP_5 OP_OUTPUTVALUE OP_NUMEQUALVERIFY OP_6 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_7 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_NIP OP_ELSE OP_SWAP OP_2 OP_NUMEQUALVERIFY OP_TXINPUTCOUNT OP_5 OP_NUMEQUALVERIFY OP_TXOUTPUTCOUNT OP_8 OP_LESSTHANOREQUAL OP_VERIFY OP_INPUTINDEX OP_1 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_UTXOBYTECODE OP_INPUTINDEX OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_INPUTINDEX OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_OVER OP_SIZE OP_NIP 20 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_2 OP_UTXOTOKENCOMMITMENT OP_EQUALVERIFY OP_0 OP_UTXOBYTECODE OP_2 OP_UTXOBYTECODE OP_OVER OP_EQUALVERIFY OP_2 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_3 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_4 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_2 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP OP_4 OP_NUMEQUALVERIFY OP_2 OP_OUTPUTTOKENCATEGORY OP_2 OP_UTXOTOKENCATEGORY OP_EQUALVERIFY OP_0 OP_UTXOTOKENCATEGORY OP_2 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_2 OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCATEGORY 20 OP_SPLIT OP_SWAP OP_2 OP_PICK OP_EQUALVERIFY OP_1 OP_EQUALVERIFY OP_4 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_4 OP_UTXOTOKENCATEGORY OP_0 OP_EQUALVERIFY OP_4 OP_UTXOVALUE OP_OVER OP_GREATERTHANOREQUAL OP_VERIFY OP_4 OP_OUTPUTVALUE OP_LESSTHANOREQUAL OP_VERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_3 OP_UTXOTOKENCOMMITMENT OP_6 OP_SPLIT OP_DROP OP_ROT OP_CAT OP_EQUALVERIFY OP_3 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 26 OP_NUMEQUALVERIFY OP_3 OP_UTXOBYTECODE OP_SIZE OP_NIP 23 OP_NUMEQUAL OP_3 OP_UTXOBYTECODE OP_SIZE OP_NIP 19 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_4 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 1d OP_NUMEQUAL OP_4 OP_OUTPUTTOKENCOMMITMENT OP_SIZE OP_NIP 27 OP_NUMEQUAL OP_BOOLOR OP_VERIFY OP_3 OP_UTXOBYTECODE OP_5 OP_OUTPUTBYTECODE OP_EQUALVERIFY OP_3 OP_UTXOTOKENCATEGORY OP_5 OP_OUTPUTTOKENCATEGORY OP_EQUALVERIFY OP_3 OP_UTXOTOKENCOMMITMENT OP_5 OP_OUTPUTTOKENCOMMITMENT OP_EQUALVERIFY OP_3 OP_UTXOVALUE OP_5 OP_OUTPUTVALUE OP_NUMEQUALVERIFY OP_6 OP_OUTPUTVALUE OP_0 OP_NUMEQUALVERIFY OP_7 OP_OUTPUTTOKENCATEGORY OP_0 OP_EQUAL OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.11.0;\n\n/**\n * @param commitmentDeposit - The amount of sathoshis the creator has to commit to the proposal.\n * - It prevents spam of proposals, reducing confusion among the stakeholders and reduces the risk of vote splitting.\n * - It requires a commitment from the creator to go ensure that the proposal is widely accepted and socially agreed upon among the shareholders of the DAO\n * If the proposal passes, the creator will get back the commitmentDeposit.\n * If the proposal fails, the BCH is sent to anyone who calls the `FailProposal` contract.\n */\ncontract Proposal(int minCommitmentDeposit) {\n  /**\n   *\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract\n   * - Input2: ProposalCounterNFT from DAO Contract\n   *   - capability: minting\n   *   - length: 4 bytes\n   *   - category: daoCategory\n   * - Input3: Funding UTXO\n   *   - value: >= commitmentDeposit\n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: ProposalCounterNFT back to DAO Contract\n   *   - capability: minting\n   *   - length: 4 bytes\n   *   - category: daoCategory\n   * - Output3: VoteProposalNFT to DAO Contract\n   *   - capability: mutable\n   *   - length: 40 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ThreadCount (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Output4: TimeProposalNFT to DAO Contract\n   *   - capability: immutable\n   *   - length: >=29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>\n   *   - category: daoCategory\n   *   - satoshis >= commitmentDeposit\n   * - Output5: OP_RETURN with the proposal data\n   * - Output6: Change pure BCH\n   */\n  function add(bytes proposalScriptHash, bytes threadCount) {\n    require(tx.inputs.length == 4);\n    require(tx.outputs.length <= 7);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the daoCategory or projectCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n    \n    // Add Proposal requires a 32 byte script hash and 2 byte thread count\n    require(proposalScriptHash.length == 32);\n    require(threadCount.length == 2);\n\n    // Proposal NFT ID increases by 1 with each transaction.\n    require(int(tx.outputs[2].nftCommitment.reverse()) == int(tx.inputs[2].nftCommitment.reverse()) + 1);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);\n\n    // ProposalCounterNFT should always be 4 bytes\n    require(tx.outputs[2].nftCommitment.length == 4);\n    // ProposalCounterNFT should keep the same category and capability.\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n\n    // ProposalCounterNFT should be minting and of the 'daoInputCategory'\n    bytes proposalCounterCategory, bytes proposalCounterCapability = tx.outputs[2].tokenCategory.split(32);\n    require(proposalCounterCategory == daoInputCategory);\n    require(proposalCounterCapability == 0x02); // Minting\n\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n\n    // TimeProposalNFT should be immutable\n    require(tx.outputs[4].tokenCategory == daoInputCategory);\n    \n    // Ensure funding is pure BCH and is >= commitmentDeposit\n    require(tx.inputs[3].tokenCategory == 0x);\n    require(tx.inputs[3].value >= minCommitmentDeposit);\n    // Ensure the TimeProposalNFT has the same value as the commitmentDeposit\n    require(tx.outputs[4].value >= minCommitmentDeposit);\n\n    // ADD: Create the proposalID<4 bytes> + threadLeft<2 bytes> + threadCount<2 bytes> + proposalScriptHash<32 bytes>\n    require(tx.outputs[3].nftCommitment == tx.outputs[2].nftCommitment + threadCount + threadCount + proposalScriptHash);\n    require(tx.outputs[3].nftCommitment.length == 40);\n\n    // Set the commitment for the TimeProposalNFT <proposalID<4 bytes>, CreatorLockingBytecode<any length bytes>>\n    // @todo: Uncomment this, commented out because of cashscript bug\n    // require(tx.outputs[4].nftCommitment == tx.outputs[2].nftCommitment + tx.inputs[3].lockingBytecode);\n\n    // Allow a P2SH32 contract or a P2PKH to initiate the proposal\n    require(tx.inputs[3].lockingBytecode.length == 35 || tx.inputs[3].lockingBytecode.length == 25);\n    require(tx.outputs[4].nftCommitment.length == 29 || tx.outputs[4].nftCommitment.length == 39);\n\n    // Force OP_RETURN output\n    require(tx.outputs[5].value == 0);    \n\n    // Ensure change is pure BCH\n    require(tx.outputs[5].tokenCategory == 0x);\n  }\n\n  /**\n   *\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract\n   * - Input2: ProposalCounterNFT from DAO Contract\n   *   - capability: minting\n   *   - length: 4 bytes\n   *   - category: daoCategory\n   * - Input3: AuthorizedThreadNFT from the Project Contract \n   * - Input4: Funding UTXO\n   *   - value: >= commitmentDeposit\n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: ProposalCounterNFT back to DAO Contract\n   *   - capability: minting\n   *   - length: 4 bytes\n   *   - category: daoCategory\n   * - Output3: VoteProposalNFT to DAO contract\n   *   - capability: mutable\n   *   - length: 6 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes)>\n   *   - category: daoCategory\n   * - Output4: TimeProposalNFT to DAO contract\n   *   - capability: immutable\n   *   - length: >=29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>\n   *   - category: daoCategory\n   *   - satoshis >= commitmentDeposit\n   * - Output5: AuthorizedThreadNFT back to the Project Contract\n   * - Output6: OP_RETURN with the proposal data\n   * - Output7: Change pure BCH\n   */\n  function remove() {\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length <= 8);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the daoCategory or projectCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    // Proposal NFT ID stays the same\n    require(tx.outputs[2].nftCommitment == tx.inputs[2].nftCommitment);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);\n\n    // ProposalCounterNFT should always be 4 bytes\n    require(tx.outputs[2].nftCommitment.length == 4);\n    // ProposalCounterNFT should keep the same category and capability.\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n\n    // ProposalCounterNFT should be minting and of the 'daoInputCategory'\n    bytes proposalCounterCategory, bytes proposalCounterCapability = tx.outputs[2].tokenCategory.split(32);\n    require(proposalCounterCategory == daoInputCategory);\n    require(proposalCounterCapability == 0x02); // Minting\n\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n\n    // TimeProposalNFT should be immutable\n    require(tx.outputs[4].tokenCategory == daoInputCategory);\n    \n    // Ensure funding is pure BCH and is >= commitmentDeposit\n    require(tx.inputs[4].tokenCategory == 0x);\n    require(tx.inputs[4].value >= minCommitmentDeposit);\n    // Ensure the TimeProposalNFT has the same value as the commitmentDeposit\n    require(tx.outputs[4].value >= minCommitmentDeposit);\n\n    // REMOVE: Take the proposalID<4 bytes> and threadLeft<2 bytes> from the AuthorizedThreadNFT\n    require(tx.outputs[3].nftCommitment == tx.inputs[3].nftCommitment.split(6)[0]);\n    require(tx.outputs[3].nftCommitment.length == 6);\n\n    // @todo: Uncomment this, commented out because of cashscript bug\n    // Set the commitment for the TimeProposalNFT <proposalID<4 bytes>, CreatorLockingBytecode<any length bytes>>\n    // require(tx.outputs[4].nftCommitment == tx.inputs[3].nftCommitment.split(4)[0] + tx.inputs[4].lockingBytecode);\n\n    // Allow a P2SH32 contract or a P2PKH to initiate the proposal\n    require(tx.inputs[3].lockingBytecode.length == 35 || tx.inputs[3].lockingBytecode.length == 25);\n    require(tx.outputs[4].nftCommitment.length == 29 || tx.outputs[4].nftCommitment.length == 39);\n\n    // Return the AuthorizedThreadNFT back to the Project Contract as it was in the input\n    require(tx.inputs[3].lockingBytecode == tx.outputs[5].lockingBytecode);\n    require(tx.inputs[3].tokenCategory == tx.outputs[5].tokenCategory);\n    require(tx.inputs[3].nftCommitment == tx.outputs[5].nftCommitment);\n    require(tx.inputs[3].value == tx.outputs[5].value);\n\n    // Force OP_RETURN output\n    require(tx.outputs[6].value == 0);    \n\n    // Ensure change is pure BCH\n    require(tx.outputs[7].tokenCategory == 0x);\n\n  }\n\n  /**\n   *\n   * @inputs\n   * - Input0: DAO Contract's authorizedThreadNFT i.e immutable NFT with commitment that has the lockingBytecode of this contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Input1: Any input from this contract\n   * - Input2: ProposalCounterNFT from DAO Contract\n   *   - capability: minting\n   *   - length: 4 bytes\n   *   - category: daoCategory\n   * - Input3: AuthorizedThreadNFT from the Project Contract \n   * - Input4: Funding UTXO\n   *   - value: >= commitmentDeposit\n   * \n   * @outputs\n   * - Output0: DAO Contract's authorizedThreadNFT back to DAO Contract\n   *   - capability: immutable\n   *   - length: 35 bytes\n   *   - category: daoCategory\n   * - Output1: Input1 back to this contract without any change\n   * - Output2: ProposalCounterNFT back to DAO Contract\n   *   - capability: minting\n   *   - length: 4 bytes\n   *   - category: daoCategory\n   * - Output3: VoteProposalNFT to DAO contract\n   *   - capability: mutable\n   *   - length: 38 bytes <ProposalID (4 bytes), ThreadLeft (2 bytes), ProposedScriptHash (32 bytes)>\n   *   - category: daoCategory\n   * - Output4: TimeProposalNFT to DAO contract\n   *   - capability: immutable\n   *   - length: 29 bytes <ProposalID (4 bytes), CreatorLockingBytecode (25 bytes)>\n   *   - category: daoCategory\n   *   - satoshis >= commitmentDeposit\n   * - Output5: AuthorizedThreadNFT back to the Project Contract\n   * - Output6: OP_RETURN with the proposal data\n   * - Output7: Change pure BCH\n   */\n  function replace(bytes proposalScriptHash) {\n    require(tx.inputs.length == 5);\n    require(tx.outputs.length <= 8);\n\n    // This contract can only be used at input1 and it should return the input1 back to itself.\n    require(this.activeInputIndex == 1);\n    require(tx.inputs[this.activeInputIndex].lockingBytecode == tx.outputs[this.activeInputIndex].lockingBytecode);\n    // Ensure that the daoCategory or projectCategory in not minted here.\n    require(tx.outputs[this.activeInputIndex].tokenCategory == 0x);\n\n    require(proposalScriptHash.length == 32);\n    // Proposal NFT ID stays the same\n    require(tx.outputs[2].nftCommitment == tx.inputs[2].nftCommitment);\n\n    // This contract can only be used with the 'lockingbytecode' used in the 0th input.\n    // Note: This contract can be used with any contract that fulfills these conditions, and that is fine\n    // because those contracts will not be manipulating the utxos of the Controller contract. Instead, they will\n    // be manipulating their own utxos.\n    bytes daoInputLockingBytecode = tx.inputs[0].lockingBytecode;\n    require(tx.inputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[2].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[3].lockingBytecode == daoInputLockingBytecode);\n    require(tx.outputs[4].lockingBytecode == daoInputLockingBytecode);\n\n    // ProposalCounterNFT should always be 4 bytes\n    require(tx.outputs[2].nftCommitment.length == 4);\n    // ProposalCounterNFT should keep the same category and capability.\n    require(tx.outputs[2].tokenCategory == tx.inputs[2].tokenCategory);\n\n    bytes daoInputCategory = tx.inputs[0].tokenCategory;\n\n    // ProposalCounterNFT should be minting and of the 'daoInputCategory'\n    bytes proposalCounterCategory, bytes proposalCounterCapability = tx.outputs[2].tokenCategory.split(32);\n    require(proposalCounterCategory == daoInputCategory);\n    require(proposalCounterCapability == 0x02); // Minting\n\n    // VoteProposalNFT should be mutable\n    bytes voteProposalCategory, bytes voteProposalCapability = tx.outputs[3].tokenCategory.split(32);\n    require(voteProposalCategory == daoInputCategory);\n    require(voteProposalCapability == 0x01); // Mutable\n\n    // TimeProposalNFT should be immutable\n    require(tx.outputs[4].tokenCategory == daoInputCategory);\n    \n    // Ensure funding is pure BCH and is >= commitmentDeposit\n    require(tx.inputs[4].tokenCategory == 0x);\n    require(tx.inputs[4].value >= minCommitmentDeposit);\n    // Ensure the TimeProposalNFT has the same value as the commitmentDeposit\n    require(tx.outputs[4].value >= minCommitmentDeposit);\n\n    // Take the proposalID<4 bytes> + threadLeft<2 bytes> + proposalScriptHash<32 bytes> from the AuthorizedThreadNFT\n    require(tx.outputs[3].nftCommitment == tx.inputs[3].nftCommitment.split(6)[0] + proposalScriptHash);\n    require(tx.outputs[3].nftCommitment.length == 38);\n\n    // Set the commitment for the TimeProposalNFT <proposalID<4 bytes>, CreatorLockingBytecode<any length bytes>>\n    // @todo: Uncomment this, commented out because of cashscript bug\n    // require(tx.outputs[3].nftCommitment == tx.inputs[3].nftCommitment.split(4)[0] + tx.inputs[4].lockingBytecode);\n\n    // Allow a P2SH32 contract or a P2PKH to initiate the proposal\n    require(tx.inputs[3].lockingBytecode.length == 35 || tx.inputs[3].lockingBytecode.length == 25);\n    require(tx.outputs[4].nftCommitment.length == 29 || tx.outputs[4].nftCommitment.length == 39);\n\n    // Return the AuthorizedThreadNFT back to the Project Contract as it was in the input\n    require(tx.inputs[3].lockingBytecode == tx.outputs[5].lockingBytecode);\n    require(tx.inputs[3].tokenCategory == tx.outputs[5].tokenCategory);\n    require(tx.inputs[3].nftCommitment == tx.outputs[5].nftCommitment);\n    require(tx.inputs[3].value == tx.outputs[5].value);\n\n    // Force OP_RETURN output\n    require(tx.outputs[6].value == 0);    \n\n    // Ensure change is pure BCH\n    require(tx.outputs[7].tokenCategory == 0x);\n\n  }\n}",
  "debug": {
    "bytecode": "5179009c63c3549c69c457a169c0519c69c0c7c0cd8769c0d10087695279827701209c6953798277529c6952d2bc8152cfbc8151939c6900c752c75179876952cd5179876953cd5179876954cd517a876952d28277549c6952d152ce876900ce52d101207f517a52798769007a52876953d101207f517a52798769007a51876954d1517a876953ce00876953c65179a26954cc517aa26953d252d254797e547a7e537a7e876953d2827701289c6953c7827701239c53c7827701199c9b6954d28277011d9c54d2827701279c9b6955cc009c6955d1008777675179519c63c3559c69c458a169c0519c69c0c7c0cd8769c0d100876952d252cf876900c752c75179876952cd5179876953cd5179876954cd517a876952d28277549c6952d152ce876900ce52d101207f517a52798769007a52876953d101207f517a52798769007a51876954d1517a876954ce00876954c65179a26954cc517aa26953d253cf567f75876953d28277569c6953c7827701239c53c7827701199c9b6954d28277011d9c54d2827701279c9b6953c755cd876953ce55d1876953cf55d2876953c655cc9c6956cc009c6957d100877767517a529c69c3559c69c458a169c0519c69c0c7c0cd8769c0d10087695179827701209c6952d252cf876900c752c75179876952cd5179876953cd5179876954cd517a876952d28277549c6952d152ce876900ce52d101207f517a52798769007a52876953d101207f517a52798769007a51876954d1517a876954ce00876954c65179a26954cc517aa26953d253cf567f75527a7e876953d2827701269c6953c7827701239c53c7827701199c9b6954d28277011d9c54d2827701279c9b6953c755cd876953ce55d1876953cf55d2876953c655cc9c6956cc009c6957d100876868",
    "sourceMap": "48:2:118:3;;;;;49:12:49:28;:32::33;:12:::1;:4::35;50:12:50:29:0;:33::34;:12:::1;:4::36;53:12:53:33:0;:37::38;:12:::1;:4::40;54:22:54:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;56:23:56:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;59:12:59:30:0;;:::37:1;;:41::43:0;:12:::1;:4::45;60:12:60:23:0;;:::30:1;;:34::35:0;:12:::1;:4::37;63:27:63:28:0;:16::43:1;:::53;:12::54;:72::73:0;:62::88:1;:::98;:58::99;:102::103:0;:58:::1;:12;:4::105;69:46:69:47:0;:36::64:1;70:22:70:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;71:23:71:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;72:23:72:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;73:23:73:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;76:23:76:24:0;:12::39:1;:::46;;:50::51:0;:12:::1;:4::53;78:23:78:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;80:39:80:40:0;:29::55:1;83:80:83:81:0;:69::96:1;:103::105:0;:69::106:1;84:12:84:35:0;;:39::55;;:12:::1;:4::57;85:12:85:37:0;;:41::45;:12:::1;:4::47;88:74:88:75:0;:63::90:1;:97::99:0;:63::100:1;89:12:89:32:0;;:36::52;;:12:::1;:4::54;90:12:90:34:0;;:38::42;:12:::1;:4::44;93:23:93:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;96:22:96:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;97:22:97:23:0;:12::30:1;:34::54:0;;:12:::1;:4::56;99:23:99:24:0;:12::31:1;:35::55:0;;:12:::1;:4::57;102:23:102:24:0;:12::39:1;:54::55:0;:43::70:1;:73::84:0;;:43:::1;:87::98:0;;:43:::1;:101::119:0;;:43:::1;:12;:4::121;103:23:103:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;110:22:110:23:0;:12::40:1;:::47;;:51::53:0;:12:::1;:67::68:0;:57::85:1;:::92;;:96::98:0;:57:::1;:12;:4::100;111:23:111:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:67::68:0;:56::83:1;:::90;;:94::96:0;:56:::1;:12;:4::98;114:23:114:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;117:23:117:24:0;:12::39:1;:43::45:0;:12:::1;48:2:118:3;;159::232::0;;;;;160:12:160:28;:32::33;:12:::1;:4::35;161:12:161:29:0;:33::34;:12:::1;:4::36;164:12:164:33:0;:37::38;:12:::1;:4::40;165:22:165:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;167:23:167:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;170:23:170:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;176:46:176:47:0;:36::64:1;177:22:177:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;178:23:178:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;179:23:179:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;180:23:180:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;183:23:183:24:0;:12::39:1;:::46;;:50::51:0;:12:::1;:4::53;185:23:185:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;187:39:187:40:0;:29::55:1;190:80:190:81:0;:69::96:1;:103::105:0;:69::106:1;191:12:191:35:0;;:39::55;;:12:::1;:4::57;192:12:192:37:0;;:41::45;:12:::1;:4::47;195:74:195:75:0;:63::90:1;:97::99:0;:63::100:1;196:12:196:32:0;;:36::52;;:12:::1;:4::54;197:12:197:34:0;;:38::42;:12:::1;:4::44;200:23:200:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;203:22:203:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;204:22:204:23:0;:12::30:1;:34::54:0;;:12:::1;:4::56;206:23:206:24:0;:12::31:1;:35::55:0;;:12:::1;:4::57;209:23:209:24:0;:12::39:1;:53::54:0;:43::69:1;:76::77:0;:43::78:1;:::81;:12;:4::83;210:23:210:24:0;:12::39:1;:::46;;:50::51:0;:12:::1;:4::53;217:22:217:23:0;:12::40:1;:::47;;:51::53:0;:12:::1;:67::68:0;:57::85:1;:::92;;:96::98:0;:57:::1;:12;:4::100;218:23:218:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:67::68:0;:56::83:1;:::90;;:94::96:0;:56:::1;:12;:4::98;221:22:221:23:0;:12::40:1;:55::56:0;:44::73:1;:12;:4::75;222:22:222:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;223:22:223:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;224:22:224:23:0;:12::30:1;:45::46:0;:34::53:1;:12;:4::55;227:23:227:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;230:23:230:24:0;:12::39:1;:43::45:0;:12:::1;159:2:232:3;;273::347::0;;;;;274:12:274:28;:32::33;:12:::1;:4::35;275:12:275:29:0;:33::34;:12:::1;:4::36;278:12:278:33:0;:37::38;:12:::1;:4::40;279:22:279:43:0;:12::60:1;:75::96:0;:64::113:1;:12;:4::115;281:23:281:44:0;:12::59:1;:63::65:0;:12:::1;:4::67;283:12:283:30:0;;:::37:1;;:41::43:0;:12:::1;:4::45;285:23:285:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;291:46:291:47:0;:36::64:1;292:22:292:23:0;:12::40:1;:44::67:0;;:12:::1;:4::69;293:23:293:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;294:23:294:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;295:23:295:24:0;:12::41:1;:45::68:0;;:12:::1;:4::70;298:23:298:24:0;:12::39:1;:::46;;:50::51:0;:12:::1;:4::53;300:23:300:24:0;:12::39:1;:53::54:0;:43::69:1;:12;:4::71;302:39:302:40:0;:29::55:1;305:80:305:81:0;:69::96:1;:103::105:0;:69::106:1;306:12:306:35:0;;:39::55;;:12:::1;:4::57;307:12:307:37:0;;:41::45;:12:::1;:4::47;310:74:310:75:0;:63::90:1;:97::99:0;:63::100:1;311:12:311:32:0;;:36::52;;:12:::1;:4::54;312:12:312:34:0;;:38::42;:12:::1;:4::44;315:23:315:24:0;:12::39:1;:43::59:0;;:12:::1;:4::61;318:22:318:23:0;:12::38:1;:42::44:0;:12:::1;:4::46;319:22:319:23:0;:12::30:1;:34::54:0;;:12:::1;:4::56;321:23:321:24:0;:12::31:1;:35::55:0;;:12:::1;:4::57;324:23:324:24:0;:12::39:1;:53::54:0;:43::69:1;:76::77:0;:43::78:1;:::81;:84::102:0;;:43:::1;:12;:4::104;325:23:325:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:4::54;332:22:332:23:0;:12::40:1;:::47;;:51::53:0;:12:::1;:67::68:0;:57::85:1;:::92;;:96::98:0;:57:::1;:12;:4::100;333:23:333:24:0;:12::39:1;:::46;;:50::52:0;:12:::1;:67::68:0;:56::83:1;:::90;;:94::96:0;:56:::1;:12;:4::98;336:22:336:23:0;:12::40:1;:55::56:0;:44::73:1;:12;:4::75;337:22:337:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;338:22:338:23:0;:12::38:1;:53::54:0;:42::69:1;:12;:4::71;339:22:339:23:0;:12::30:1;:45::46:0;:34::53:1;:12;:4::55;342:23:342:24:0;:12::31:1;:35::36:0;:12:::1;:4::38;345:23:345:24:0;:12::39:1;:43::45:0;:12:::1;10:0:348:1;",
    "logs": [],
    "requires": [
      {
        "ip": 9,
        "line": 49
      },
      {
        "ip": 13,
        "line": 50
      },
      {
        "ip": 17,
        "line": 53
      },
      {
        "ip": 23,
        "line": 54
      },
      {
        "ip": 28,
        "line": 56
      },
      {
        "ip": 35,
        "line": 59
      },
      {
        "ip": 42,
        "line": 60
      },
      {
        "ip": 54,
        "line": 63
      },
      {
        "ip": 62,
        "line": 70
      },
      {
        "ip": 68,
        "line": 71
      },
      {
        "ip": 74,
        "line": 72
      },
      {
        "ip": 80,
        "line": 73
      },
      {
        "ip": 87,
        "line": 76
      },
      {
        "ip": 93,
        "line": 78
      },
      {
        "ip": 105,
        "line": 84
      },
      {
        "ip": 110,
        "line": 85
      },
      {
        "ip": 120,
        "line": 89
      },
      {
        "ip": 125,
        "line": 90
      },
      {
        "ip": 131,
        "line": 93
      },
      {
        "ip": 136,
        "line": 96
      },
      {
        "ip": 142,
        "line": 97
      },
      {
        "ip": 148,
        "line": 99
      },
      {
        "ip": 163,
        "line": 102
      },
      {
        "ip": 170,
        "line": 103
      },
      {
        "ip": 184,
        "line": 110
      },
      {
        "ip": 198,
        "line": 111
      },
      {
        "ip": 203,
        "line": 114
      },
      {
        "ip": 208,
        "line": 117
      },
      {
        "ip": 218,
        "line": 160
      },
      {
        "ip": 222,
        "line": 161
      },
      {
        "ip": 226,
        "line": 164
      },
      {
        "ip": 232,
        "line": 165
      },
      {
        "ip": 237,
        "line": 167
      },
      {
        "ip": 243,
        "line": 170
      },
      {
        "ip": 251,
        "line": 177
      },
      {
        "ip": 257,
        "line": 178
      },
      {
        "ip": 263,
        "line": 179
      },
      {
        "ip": 269,
        "line": 180
      },
      {
        "ip": 276,
        "line": 183
      },
      {
        "ip": 282,
        "line": 185
      },
      {
        "ip": 294,
        "line": 191
      },
      {
        "ip": 299,
        "line": 192
      },
      {
        "ip": 309,
        "line": 196
      },
      {
        "ip": 314,
        "line": 197
      },
      {
        "ip": 320,
        "line": 200
      },
      {
        "ip": 325,
        "line": 203
      },
      {
        "ip": 331,
        "line": 204
      },
      {
        "ip": 337,
        "line": 206
      },
      {
        "ip": 346,
        "line": 209
      },
      {
        "ip": 353,
        "line": 210
      },
      {
        "ip": 367,
        "line": 217
      },
      {
        "ip": 381,
        "line": 218
      },
      {
        "ip": 387,
        "line": 221
      },
      {
        "ip": 393,
        "line": 222
      },
      {
        "ip": 399,
        "line": 223
      },
      {
        "ip": 405,
        "line": 224
      },
      {
        "ip": 410,
        "line": 227
      },
      {
        "ip": 415,
        "line": 230
      },
      {
        "ip": 425,
        "line": 274
      },
      {
        "ip": 429,
        "line": 275
      },
      {
        "ip": 433,
        "line": 278
      },
      {
        "ip": 439,
        "line": 279
      },
      {
        "ip": 444,
        "line": 281
      },
      {
        "ip": 451,
        "line": 283
      },
      {
        "ip": 457,
        "line": 285
      },
      {
        "ip": 465,
        "line": 292
      },
      {
        "ip": 471,
        "line": 293
      },
      {
        "ip": 477,
        "line": 294
      },
      {
        "ip": 483,
        "line": 295
      },
      {
        "ip": 490,
        "line": 298
      },
      {
        "ip": 496,
        "line": 300
      },
      {
        "ip": 508,
        "line": 306
      },
      {
        "ip": 513,
        "line": 307
      },
      {
        "ip": 523,
        "line": 311
      },
      {
        "ip": 528,
        "line": 312
      },
      {
        "ip": 534,
        "line": 315
      },
      {
        "ip": 539,
        "line": 318
      },
      {
        "ip": 545,
        "line": 319
      },
      {
        "ip": 551,
        "line": 321
      },
      {
        "ip": 563,
        "line": 324
      },
      {
        "ip": 570,
        "line": 325
      },
      {
        "ip": 584,
        "line": 332
      },
      {
        "ip": 598,
        "line": 333
      },
      {
        "ip": 604,
        "line": 336
      },
      {
        "ip": 610,
        "line": 337
      },
      {
        "ip": 616,
        "line": 338
      },
      {
        "ip": 622,
        "line": 339
      },
      {
        "ip": 627,
        "line": 342
      },
      {
        "ip": 632,
        "line": 345
      }
    ]
  },
  "compiler": {
    "name": "cashc",
    "version": "0.11.0-next.2"
  },
  "updatedAt": "2025-03-05T16:25:35.043Z"
}